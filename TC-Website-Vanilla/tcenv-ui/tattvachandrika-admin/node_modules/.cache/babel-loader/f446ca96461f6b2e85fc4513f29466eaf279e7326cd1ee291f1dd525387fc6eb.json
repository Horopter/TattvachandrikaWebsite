{"ast":null,"code":"import axios from 'axios';\nimport AddEditSubscriptionModal from './AddEditSubscriptionModal.vue';\nimport ConfirmationModal from './ConfirmationModal.vue';\nexport default {\n  components: {\n    AddEditSubscriptionModal,\n    ConfirmationModal\n  },\n  data() {\n    return {\n      subscriber: null,\n      activeSubscriptions: [],\n      inactiveSubscriptions: [],\n      plans: [],\n      paymentModes: [],\n      showAddEditSubscriptionModal: false,\n      selectedSubscription: null,\n      showConfirmationModal: false,\n      subscriptionToConfirm: null\n    };\n  },\n  created() {\n    this.loadSubscriberDetails();\n    this.loadPlans();\n    this.loadPaymentModes();\n  },\n  methods: {\n    loadSubscriberDetails() {\n      const subscriberId = this.$route.params.id;\n      axios.get(`http://localhost:8000/api/subscribers/${subscriberId}/`).then(response => {\n        this.subscriber = response.data;\n        this.activeSubscriptions = this.subscriber.subscriptions.filter(sub => sub.active);\n        this.inactiveSubscriptions = this.subscriber.subscriptions.filter(sub => !sub.active);\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscriber details!\", error);\n      });\n    },\n    loadPlans() {\n      axios.get('http://localhost:8000/api/subscription-plans/').then(response => {\n        this.plans = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscription plans!\", error);\n      });\n    },\n    loadPaymentModes() {\n      axios.get('http://localhost:8000/api/payment-modes/').then(response => {\n        this.paymentModes = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the payment modes!\", error);\n      });\n    },\n    openAddSubscriptionModal() {\n      this.selectedSubscription = {\n        subscription_plan: '',\n        start_date: '',\n        end_date: '',\n        payment_status: 'Pending',\n        payment_mode: '',\n        payment_date: ''\n      };\n      this.showAddEditSubscriptionModal = true;\n    },\n    closeAddEditSubscriptionModal() {\n      this.showAddEditSubscriptionModal = false;\n    },\n    saveSubscription(subscription) {\n      if (subscription._id) {\n        axios.put(`http://localhost:8000/api/subscriptions/${subscription._id}/`, subscription).then(() => {\n          this.loadSubscriberDetails();\n          this.showAddEditSubscriptionModal = false;\n        }).catch(error => {\n          console.error(\"There was an error updating the subscription!\", error);\n        });\n      } else {\n        subscription.subscriber = this.subscriber._id;\n        axios.post('http://localhost:8000/api/subscriptions/', subscription).then(() => {\n          this.loadSubscriberDetails();\n          this.showAddEditSubscriptionModal = false;\n        }).catch(error => {\n          console.error(\"There was an error adding the subscription!\", error);\n        });\n      }\n    },\n    editSubscription(subscription) {\n      this.selectedSubscription = {\n        ...subscription\n      };\n      this.showAddEditSubscriptionModal = true;\n    },\n    confirmPaymentSuccess(subscription) {\n      if (subscription.payment_status === 'Successful') {\n        this.subscriptionToConfirm = subscription;\n        this.showConfirmationModal = true;\n      }\n    },\n    hideConfirmationModal() {\n      this.showConfirmationModal = false;\n    },\n    markPaymentSuccess() {\n      if (this.subscriptionToConfirm) {\n        axios.put(`http://localhost:8000/api/subscriptions/${this.subscriptionToConfirm._id}/`, {\n          ...this.subscriptionToConfirm,\n          payment_status: 'Successful'\n        }).then(() => {\n          this.loadSubscriberDetails();\n          this.hideConfirmationModal();\n        }).catch(error => {\n          console.error(\"There was an error marking the payment as successful!\", error);\n        });\n      }\n    },\n    getPlanName(planId) {\n      const plan = this.plans.find(p => p._id === planId);\n      return plan ? plan.name : '';\n    }\n  }\n};","map":{"version":3,"names":["axios","AddEditSubscriptionModal","ConfirmationModal","components","data","subscriber","activeSubscriptions","inactiveSubscriptions","plans","paymentModes","showAddEditSubscriptionModal","selectedSubscription","showConfirmationModal","subscriptionToConfirm","created","loadSubscriberDetails","loadPlans","loadPaymentModes","methods","subscriberId","$route","params","id","get","then","response","subscriptions","filter","sub","active","catch","error","console","openAddSubscriptionModal","subscription_plan","start_date","end_date","payment_status","payment_mode","payment_date","closeAddEditSubscriptionModal","saveSubscription","subscription","_id","put","post","editSubscription","confirmPaymentSuccess","hideConfirmationModal","markPaymentSuccess","getPlanName","planId","plan","find","p","name"],"sources":["C:\\Users\\santoshdesai\\Tattvachandrika\\tcenv-ui\\tattvachandrika-admin\\src\\components\\MagazineSubscriberDetails.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mt-5\">\r\n    <!-- Breadcrumbs -->\r\n    <nav aria-label=\"breadcrumb\">\r\n      <ol class=\"breadcrumb\">\r\n        <li class=\"breadcrumb-item\"><router-link to=\"/\">Home</router-link></li>\r\n        <li class=\"breadcrumb-item\"><router-link to=\"/subscribers\">Subscribers</router-link></li>\r\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">{{ subscriber.name }}</li>\r\n      </ol>\r\n    </nav>\r\n\r\n    <!-- Subscriber Details -->\r\n    <h2>Subscriber Details</h2>\r\n    <div v-if=\"subscriber\">\r\n      <p><strong>Name:</strong> {{ subscriber.name }}</p>\r\n      <p><strong>Registration Number:</strong> {{ subscriber.registration_number }}</p>\r\n      <p><strong>Address:</strong> {{ subscriber.address }}</p>\r\n      <p><strong>City/Town:</strong> {{ subscriber.city_town }}</p>\r\n      <p><strong>State:</strong> {{ subscriber.state }}</p>\r\n      <p><strong>Pincode:</strong> {{ subscriber.pincode }}</p>\r\n      <p><strong>Phone:</strong> {{ subscriber.phone }}</p>\r\n      <p><strong>Email:</strong> {{ subscriber.email }}</p>\r\n      <p><strong>Category:</strong> {{ subscriber.category.name }}</p>\r\n      <p><strong>Type:</strong> {{ subscriber.stype.name }}</p>\r\n      <p><strong>Notes:</strong> {{ subscriber.notes }}</p>\r\n      <p><strong>Has Active Subscriptions:</strong> {{ subscriber.hasActiveSubscriptions }}</p>\r\n      <button class=\"btn btn-primary\" @click=\"openAddSubscriptionModal\">Add Subscription</button>\r\n\r\n      <!-- Tabs for Active and Inactive Subscriptions -->\r\n      <ul class=\"nav nav-tabs mt-3\" id=\"subscriptionTab\" role=\"tablist\">\r\n        <li class=\"nav-item\" role=\"presentation\">\r\n          <button class=\"nav-link active\" id=\"active-sub-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#active-sub\" type=\"button\" role=\"tab\" aria-controls=\"active-sub\" aria-selected=\"true\">Active Subscriptions</button>\r\n        </li>\r\n        <li class=\"nav-item\" role=\"presentation\">\r\n          <button class=\"nav-link\" id=\"inactive-sub-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#inactive-sub\" type=\"button\" role=\"tab\" aria-controls=\"inactive-sub\" aria-selected=\"false\">Inactive Subscriptions</button>\r\n        </li>\r\n      </ul>\r\n      <div class=\"tab-content\" id=\"subscriptionTabContent\">\r\n        <div class=\"tab-pane fade show active\" id=\"active-sub\" role=\"tabpanel\" aria-labelledby=\"active-sub-tab\">\r\n          <!-- Active Subscriptions Table -->\r\n          <table class=\"table table-striped mt-3\">\r\n            <thead>\r\n              <tr>\r\n                <th>Start Date</th>\r\n                <th>End Date</th>\r\n                <th>Subscription Plan</th>\r\n                <th>Payment Status</th>\r\n                <th>Payment Mode</th>\r\n                <th>Payment Date</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"subscription in activeSubscriptions\" :key=\"subscription._id\">\r\n                <td>{{ subscription.start_date }}</td>\r\n                <td>{{ subscription.end_date }}</td>\r\n                <td>{{ getPlanName(subscription.subscription_plan) }}</td>\r\n                <td>\r\n                  <select v-if=\"subscription.payment_status !== 'Successful'\" v-model=\"subscription.payment_status\" @change=\"confirmPaymentSuccess(subscription)\">\r\n                    <option value=\"Pending\">Pending</option>\r\n                    <option value=\"Successful\">Successful</option>\r\n                  </select>\r\n                  <span v-else>{{ subscription.payment_status }}</span>\r\n                </td>\r\n                <td>{{ subscription.payment_mode }}</td>\r\n                <td>{{ subscription.payment_date }}</td>\r\n                <td>\r\n                  <button class=\"btn btn-primary btn-sm\" @click=\"editSubscription(subscription)\" v-if=\"subscription.payment_status !== 'Successful'\">Edit</button>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <div class=\"tab-pane fade\" id=\"inactive-sub\" role=\"tabpanel\" aria-labelledby=\"inactive-sub-tab\">\r\n          <!-- Inactive Subscriptions Table -->\r\n          <table class=\"table table-striped mt-3\">\r\n            <thead>\r\n              <tr>\r\n                <th>Start Date</th>\r\n                <th>End Date</th>\r\n                <th>Subscription Plan</th>\r\n                <th>Payment Status</th>\r\n                <th>Payment Mode</th>\r\n                <th>Payment Date</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"subscription in inactiveSubscriptions\" :key=\"subscription._id\">\r\n                <td>{{ subscription.start_date }}</td>\r\n                <td>{{ subscription.end_date }}</td>\r\n                <td>{{ getPlanName(subscription.subscription_plan) }}</td>\r\n                <td>{{ subscription.payment_status }}</td>\r\n                <td>{{ subscription.payment_mode }}</td>\r\n                <td>{{ subscription.payment_date }}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Add/Edit Subscription Modal -->\r\n    <add-edit-subscription-modal \r\n      :show=\"showAddEditSubscriptionModal\" \r\n      :subscription=\"selectedSubscription\" \r\n      :plans=\"plans\" \r\n      :paymentModes=\"paymentModes\" \r\n      @close=\"closeAddEditSubscriptionModal\" \r\n      @save=\"saveSubscription\">\r\n    </add-edit-subscription-modal>\r\n\r\n    <!-- Confirmation Modal -->\r\n    <confirmation-modal\r\n      v-if=\"showConfirmationModal\"\r\n      :show=\"showConfirmationModal\"\r\n      title=\"Confirm Payment Success\"\r\n      message=\"Are you sure you want to mark this payment as successful? This action cannot be undone.\"\r\n      @close=\"hideConfirmationModal\"\r\n      @confirm=\"markPaymentSuccess\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport AddEditSubscriptionModal from './AddEditSubscriptionModal.vue';\r\nimport ConfirmationModal from './ConfirmationModal.vue';\r\n\r\nexport default {\r\n  components: {\r\n    AddEditSubscriptionModal,\r\n    ConfirmationModal\r\n  },\r\n  data() {\r\n    return {\r\n      subscriber: null,\r\n      activeSubscriptions: [],\r\n      inactiveSubscriptions: [],\r\n      plans: [],\r\n      paymentModes: [],\r\n      showAddEditSubscriptionModal: false,\r\n      selectedSubscription: null,\r\n      showConfirmationModal: false,\r\n      subscriptionToConfirm: null\r\n    };\r\n  },\r\n  created() {\r\n    this.loadSubscriberDetails();\r\n    this.loadPlans();\r\n    this.loadPaymentModes();\r\n  },\r\n  methods: {\r\n    loadSubscriberDetails() {\r\n      const subscriberId = this.$route.params.id;\r\n      axios.get(`http://localhost:8000/api/subscribers/${subscriberId}/`)\r\n        .then(response => {\r\n          this.subscriber = response.data;\r\n          this.activeSubscriptions = this.subscriber.subscriptions.filter(sub => sub.active);\r\n          this.inactiveSubscriptions = this.subscriber.subscriptions.filter(sub => !sub.active);\r\n        })\r\n        .catch(error => {\r\n          console.error(\"There was an error retrieving the subscriber details!\", error);\r\n        });\r\n    },\r\n    loadPlans() {\r\n      axios.get('http://localhost:8000/api/subscription-plans/')\r\n        .then(response => {\r\n          this.plans = response.data;\r\n        })\r\n        .catch(error => {\r\n          console.error(\"There was an error retrieving the subscription plans!\", error);\r\n        });\r\n    },\r\n    loadPaymentModes() {\r\n      axios.get('http://localhost:8000/api/payment-modes/')\r\n        .then(response => {\r\n          this.paymentModes = response.data;\r\n        })\r\n        .catch(error => {\r\n          console.error(\"There was an error retrieving the payment modes!\", error);\r\n        });\r\n    },\r\n    openAddSubscriptionModal() {\r\n      this.selectedSubscription = {\r\n        subscription_plan: '',\r\n        start_date: '',\r\n        end_date: '',\r\n        payment_status: 'Pending',\r\n        payment_mode: '',\r\n        payment_date: ''\r\n      };\r\n      this.showAddEditSubscriptionModal = true;\r\n    },\r\n    closeAddEditSubscriptionModal() {\r\n      this.showAddEditSubscriptionModal = false;\r\n    },\r\n    saveSubscription(subscription) {\r\n      if (subscription._id) {\r\n        axios.put(`http://localhost:8000/api/subscriptions/${subscription._id}/`, subscription)\r\n          .then(() => {\r\n            this.loadSubscriberDetails();\r\n            this.showAddEditSubscriptionModal = false;\r\n          })\r\n          .catch(error => {\r\n            console.error(\"There was an error updating the subscription!\", error);\r\n          });\r\n      } else {\r\n        subscription.subscriber = this.subscriber._id;\r\n        axios.post('http://localhost:8000/api/subscriptions/', subscription)\r\n          .then(() => {\r\n            this.loadSubscriberDetails();\r\n            this.showAddEditSubscriptionModal = false;\r\n          })\r\n          .catch(error => {\r\n            console.error(\"There was an error adding the subscription!\", error);\r\n          });\r\n      }\r\n    },\r\n    editSubscription(subscription) {\r\n      this.selectedSubscription = { ...subscription };\r\n      this.showAddEditSubscriptionModal = true;\r\n    },\r\n    confirmPaymentSuccess(subscription) {\r\n      if (subscription.payment_status === 'Successful') {\r\n        this.subscriptionToConfirm = subscription;\r\n        this.showConfirmationModal = true;\r\n      }\r\n    },\r\n    hideConfirmationModal() {\r\n      this.showConfirmationModal = false;\r\n    },\r\n    markPaymentSuccess() {\r\n      if (this.subscriptionToConfirm) {\r\n        axios.put(`http://localhost:8000/api/subscriptions/${this.subscriptionToConfirm._id}/`, {\r\n          ...this.subscriptionToConfirm,\r\n          payment_status: 'Successful'\r\n        })\r\n          .then(() => {\r\n            this.loadSubscriberDetails();\r\n            this.hideConfirmationModal();\r\n          })\r\n          .catch(error => {\r\n            console.error(\"There was an error marking the payment as successful!\", error);\r\n          });\r\n      }\r\n    },\r\n    getPlanName(planId) {\r\n      const plan = this.plans.find(p => p._id === planId);\r\n      return plan ? plan.name : '';\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.table {\r\n  margin-top: 20px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}