{"ast":null,"code":"import subscriptionLanguageService from '../services/subscriptionLanguageService';\nimport ConfirmationModal from './ConfirmationModal.vue';\nexport default {\n  components: {\n    ConfirmationModal\n  },\n  data() {\n    return {\n      subscriptionLanguages: [],\n      addingNew: false,\n      editMode: null,\n      showConfirmationModal: false,\n      languageToDelete: null,\n      newSubscriptionLanguage: {\n        name: ''\n      },\n      editSubscriptionLanguage: {\n        name: ''\n      }\n    };\n  },\n  created() {\n    this.loadSubscriptionLanguages();\n  },\n  methods: {\n    loadSubscriptionLanguages() {\n      subscriptionLanguageService.getSubscriptionLanguages().then(response => {\n        this.subscriptionLanguages = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscription languages!\", error);\n      });\n    },\n    startAddingNew() {\n      this.addingNew = true;\n      this.resetNewSubscriptionLanguage();\n    },\n    cancelNewSubscriptionLanguage() {\n      this.addingNew = false;\n    },\n    resetNewSubscriptionLanguage() {\n      this.newSubscriptionLanguage = {\n        name: ''\n      };\n    },\n    saveNewSubscriptionLanguage() {\n      subscriptionLanguageService.createSubscriptionLanguage(this.newSubscriptionLanguage).then(() => {\n        this.loadSubscriptionLanguages();\n        this.addingNew = false;\n      }).catch(error => {\n        console.error(\"There was an error saving the subscription language!\", error);\n      });\n    },\n    editSubscriptionLanguageFunc(language) {\n      this.editMode = language._id;\n      this.editSubscriptionLanguage = {\n        ...language\n      };\n    },\n    cancelEdit() {\n      this.editMode = null;\n    },\n    updateSubscriptionLanguage(id) {\n      subscriptionLanguageService.updateSubscriptionLanguage(id, this.editSubscriptionLanguage).then(() => {\n        this.loadSubscriptionLanguages();\n        this.editMode = null;\n      }).catch(error => {\n        console.error(\"There was an error updating the subscription language!\", error);\n      });\n    },\n    showDeleteModal(id) {\n      this.languageToDelete = id;\n      this.showConfirmationModal = true;\n    },\n    hideDeleteModal() {\n      this.showConfirmationModal = false;\n      this.languageToDelete = null;\n    },\n    deleteSubscriptionLanguage() {\n      subscriptionLanguageService.deleteSubscriptionLanguage(this.languageToDelete).then(() => {\n        this.loadSubscriptionLanguages();\n        this.hideDeleteModal();\n      }).catch(error => {\n        console.error(\"There was an error deleting the subscription language!\", error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["subscriptionLanguageService","ConfirmationModal","components","data","subscriptionLanguages","addingNew","editMode","showConfirmationModal","languageToDelete","newSubscriptionLanguage","name","editSubscriptionLanguage","created","loadSubscriptionLanguages","methods","getSubscriptionLanguages","then","response","catch","error","console","startAddingNew","resetNewSubscriptionLanguage","cancelNewSubscriptionLanguage","saveNewSubscriptionLanguage","createSubscriptionLanguage","editSubscriptionLanguageFunc","language","_id","cancelEdit","updateSubscriptionLanguage","id","showDeleteModal","hideDeleteModal","deleteSubscriptionLanguage"],"sources":["C:\\Users\\santoshdesai\\Tattvachandrika\\tcenv-ui\\tattvachandrika-admin\\src\\components\\SubscriptionLanguages.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-5\">\n    <h2>Subscription Languages</h2>\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><router-link to=\"/\">Home</router-link></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">Subscription Languages</li>\n      </ol>\n    </nav>\n\n    <table class=\"table table-striped mt-4\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-if=\"addingNew\">\n          <td><input type=\"text\" v-model=\"newSubscriptionLanguage.name\" class=\"form-control\" /></td>\n          <td>\n            <button class=\"btn btn-primary btn-sm\" @click=\"saveNewSubscriptionLanguage\">Save</button>\n            <button class=\"btn btn-secondary btn-sm\" @click=\"cancelNewSubscriptionLanguage\">Cancel</button>\n          </td>\n        </tr>\n        <tr v-for=\"language in subscriptionLanguages\" :key=\"language._id\">\n          <template v-if=\"editMode === language._id\">\n            <td><input type=\"text\" v-model=\"editSubscriptionLanguage.name\" class=\"form-control\" /></td>\n            <td>\n              <button class=\"btn btn-primary btn-sm\" @click=\"updateSubscriptionLanguage(language._id)\">Save</button>\n              <button class=\"btn btn-secondary btn-sm\" @click=\"cancelEdit\">Cancel</button>\n            </td>\n          </template>\n          <template v-else>\n            <td>{{ language.name }}</td>\n            <td>\n              <button class=\"btn btn-warning btn-sm\" @click=\"editSubscriptionLanguageFunc(language)\">Edit</button>\n              <button class=\"btn btn-danger btn-sm\" @click=\"showDeleteModal(language._id)\">Delete</button>\n            </td>\n          </template>\n        </tr>\n      </tbody>\n    </table>\n    <button class=\"btn btn-success mt-3\" @click=\"startAddingNew\">Add New Language</button>\n\n    <confirmation-modal\n      v-if=\"showConfirmationModal\"\n      :show=\"showConfirmationModal\"\n      title=\"Confirm Delete\"\n      message=\"Are you sure you want to delete this subscription language?\"\n      @close=\"hideDeleteModal\"\n      @confirm=\"deleteSubscriptionLanguage\"\n    />\n  </div>\n</template>\n\n<script>\nimport subscriptionLanguageService from '../services/subscriptionLanguageService';\nimport ConfirmationModal from './ConfirmationModal.vue';\n\nexport default {\n  components: {\n    ConfirmationModal\n  },\n  data() {\n    return {\n      subscriptionLanguages: [],\n      addingNew: false,\n      editMode: null,\n      showConfirmationModal: false,\n      languageToDelete: null,\n      newSubscriptionLanguage: {\n        name: ''\n      },\n      editSubscriptionLanguage: {\n        name: ''\n      }\n    };\n  },\n  created() {\n    this.loadSubscriptionLanguages();\n  },\n  methods: {\n    loadSubscriptionLanguages() {\n      subscriptionLanguageService.getSubscriptionLanguages().then(response => {\n        this.subscriptionLanguages = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscription languages!\", error);\n      });\n    },\n    startAddingNew() {\n      this.addingNew = true;\n      this.resetNewSubscriptionLanguage();\n    },\n    cancelNewSubscriptionLanguage() {\n      this.addingNew = false;\n    },\n    resetNewSubscriptionLanguage() {\n      this.newSubscriptionLanguage = {\n        name: ''\n      };\n    },\n    saveNewSubscriptionLanguage() {\n      subscriptionLanguageService.createSubscriptionLanguage(this.newSubscriptionLanguage).then(() => {\n        this.loadSubscriptionLanguages();\n        this.addingNew = false;\n      }).catch(error => {\n        console.error(\"There was an error saving the subscription language!\", error);\n      });\n    },\n    editSubscriptionLanguageFunc(language) {\n      this.editMode = language._id;\n      this.editSubscriptionLanguage = { ...language };\n    },\n    cancelEdit() {\n      this.editMode = null;\n    },\n    updateSubscriptionLanguage(id) {\n      subscriptionLanguageService.updateSubscriptionLanguage(id, this.editSubscriptionLanguage).then(() => {\n        this.loadSubscriptionLanguages();\n        this.editMode = null;\n      }).catch(error => {\n        console.error(\"There was an error updating the subscription language!\", error);\n      });\n    },\n    showDeleteModal(id) {\n      this.languageToDelete = id;\n      this.showConfirmationModal = true;\n    },\n    hideDeleteModal() {\n      this.showConfirmationModal = false;\n      this.languageToDelete = null;\n    },\n    deleteSubscriptionLanguage() {\n      subscriptionLanguageService.deleteSubscriptionLanguage(this.languageToDelete).then(() => {\n        this.loadSubscriptionLanguages();\n        this.hideDeleteModal();\n      }).catch(error => {\n        console.error(\"There was an error deleting the subscription language!\", error);\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}