{"ast":null,"code":"import subscriptionService from '../services/subscriptionService';\nimport confirmationModal from './ConfirmationModal.vue';\nimport editPlanModal from './EditPlanModal.vue';\nexport default {\n  components: {\n    confirmationModal,\n    editPlanModal\n  },\n  data() {\n    return {\n      subscriptionPlans: [],\n      languages: [],\n      modes: [],\n      newPlan: null,\n      selectedPlan: null,\n      showConfirmationModal: false,\n      showEditPlanModal: false,\n      planToDelete: null\n    };\n  },\n  created() {\n    this.loadPlans();\n    this.loadLanguages();\n    this.loadModes();\n  },\n  methods: {\n    loadPlans() {\n      subscriptionService.getPlans().then(response => {\n        this.subscriptionPlans = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscription plans!\", error);\n      });\n    },\n    loadLanguages() {\n      subscriptionService.getLanguages().then(response => {\n        this.languages = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscription languages!\", error);\n      });\n    },\n    loadModes() {\n      subscriptionService.getModes().then(response => {\n        this.modes = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscription modes!\", error);\n      });\n    },\n    addNewRow() {\n      this.newPlan = {\n        start_date: '',\n        subscription_price: '',\n        subscription_language: '',\n        subscription_mode: '',\n        duration_in_months: ''\n      };\n    },\n    saveNewPlan() {\n      const existingPlan = this.subscriptionPlans.find(plan => plan.duration_in_months === this.newPlan.duration_in_months && plan.subscription_language._id === this.newPlan.subscription_language && plan.subscription_mode._id === this.newPlan.subscription_mode);\n      if (existingPlan) {\n        const version = parseInt(existingPlan.version.substring(1)) + 1;\n        this.newPlan.version = `v${version}`;\n        if (existingPlan.subscription_price == this.newPlan.subscription_price) {\n          alert('There is no change from the existing version.');\n        } else {\n          this.confirmVersionUpgrade(existingPlan, this.newPlan);\n        }\n      } else {\n        this.newPlan.version = 'v1';\n        this.newPlan.name = this.generateName(this.newPlan.duration_in_months, this.newPlan.subscription_language, this.newPlan.subscription_mode);\n        subscriptionService.createPlan(this.newPlan).then(() => {\n          this.loadPlans();\n          this.newPlan = null;\n        }).catch(error => {\n          console.error(\"There was an error creating the subscription plan!\", error);\n        });\n      }\n    },\n    cancelNewPlan() {\n      this.newPlan = null;\n    },\n    editPlan(plan) {\n      this.selectedPlan = {\n        ...plan\n      };\n      this.showEditPlanModal = true;\n    },\n    updatePlan(updatedPlan) {\n      subscriptionService.updatePlan(updatedPlan._id, updatedPlan).then(() => {\n        this.loadPlans();\n        this.hideEditPlanModal();\n      }).catch(error => {\n        console.error(\"There was an error updating the subscription plan!\", error);\n      });\n    },\n    confirmDeletePlan(planId) {\n      this.planToDelete = planId;\n      this.showConfirmationModal = true;\n    },\n    hideDeleteModal() {\n      this.showConfirmationModal = false;\n    },\n    deletePlan() {\n      if (this.planToDelete) {\n        subscriptionService.deletePlan(this.planToDelete).then(() => {\n          this.loadPlans();\n          this.hideDeleteModal();\n        }).catch(error => {\n          console.error(\"There was an error deleting the subscription plan!\", error);\n        });\n      }\n    },\n    hideEditPlanModal() {\n      this.showEditPlanModal = false;\n    },\n    generateName(duration, language, mode) {\n      const languageObj = this.languages.find(lang => lang._id === language);\n      const modeObj = this.modes.find(mod => mod._id === mode);\n      return `${duration} months - ${languageObj ? languageObj.name : ''} - ${modeObj ? modeObj.name : ''}`;\n    },\n    confirmVersionUpgrade(existingPlan, newPlan) {\n      if (confirm(`The subscription plan with the same combination already exists as version ${existingPlan.version}. Do you want to upgrade to version ${newPlan.version}?`)) {\n        this.newPlan.name = this.generateName(this.newPlan.duration_in_months, this.newPlan.subscription_language, this.newPlan.subscription_mode);\n        subscriptionService.createPlan(this.newPlan).then(() => {\n          this.loadPlans();\n          this.newPlan = null;\n        }).catch(error => {\n          console.error(\"There was an error creating the subscription plan!\", error);\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["subscriptionService","confirmationModal","editPlanModal","components","data","subscriptionPlans","languages","modes","newPlan","selectedPlan","showConfirmationModal","showEditPlanModal","planToDelete","created","loadPlans","loadLanguages","loadModes","methods","getPlans","then","response","catch","error","console","getLanguages","getModes","addNewRow","start_date","subscription_price","subscription_language","subscription_mode","duration_in_months","saveNewPlan","existingPlan","find","plan","_id","version","parseInt","substring","alert","confirmVersionUpgrade","name","generateName","createPlan","cancelNewPlan","editPlan","updatePlan","updatedPlan","hideEditPlanModal","confirmDeletePlan","planId","hideDeleteModal","deletePlan","duration","language","mode","languageObj","lang","modeObj","mod","confirm"],"sources":["C:\\Users\\santoshdesai\\Tattvachandrika\\tcenv-ui\\tattvachandrika-admin\\src\\components\\EditPlanModal.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-5\">\n    <h2>Subscription Plans</h2>\n    <button class=\"btn btn-primary\" @click=\"addNewRow\">Add Subscription Plan</button>\n    <table class=\"table table-striped mt-4\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Version</th>\n          <th>Start Date</th>\n          <th>Subscription Price</th>\n          <th>Subscription Language</th>\n          <th>Subscription Mode</th>\n          <th>Duration (Months)</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-if=\"newPlan\">\n          <td>{{ generateName(newPlan.duration_in_months, newPlan.subscription_language, newPlan.subscription_mode) }}</td>\n          <td></td>\n          <td><input type=\"date\" class=\"form-control\" v-model=\"newPlan.start_date\" /></td>\n          <td><input type=\"number\" class=\"form-control\" v-model=\"newPlan.subscription_price\" /></td>\n          <td>\n            <select class=\"form-control\" v-model=\"newPlan.subscription_language\">\n              <option v-for=\"language in languages\" :key=\"language._id\" :value=\"language._id\">{{ language.name }}</option>\n            </select>\n          </td>\n          <td>\n            <select class=\"form-control\" v-model=\"newPlan.subscription_mode\">\n              <option v-for=\"mode in modes\" :key=\"mode._id\" :value=\"mode._id\">{{ mode.name }}</option>\n            </select>\n          </td>\n          <td><input type=\"number\" class=\"form-control\" v-model=\"newPlan.duration_in_months\" /></td>\n          <td>\n            <button class=\"btn btn-success btn-sm\" @click=\"saveNewPlan\">Save</button>\n            <button class=\"btn btn-secondary btn-sm\" @click=\"cancelNewPlan\">Cancel</button>\n          </td>\n        </tr>\n        <tr v-for=\"plan in subscriptionPlans\" :key=\"plan._id\">\n          <td>{{ plan.name }}</td>\n          <td>{{ plan.version }}</td>\n          <td>{{ plan.start_date }}</td>\n          <td>{{ plan.subscription_price }}</td>\n          <td>{{ plan.subscription_language.name }}</td>\n          <td>{{ plan.subscription_mode.name }}</td>\n          <td>{{ plan.duration_in_months }}</td>\n          <td>\n            <button class=\"btn btn-warning btn-sm\" @click=\"editPlan(plan)\">Edit</button>\n            <button class=\"btn btn-danger btn-sm\" @click=\"confirmDeletePlan(plan._id)\">Delete</button>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n\n    <confirmation-modal\n      v-if=\"showConfirmationModal\"\n      :show=\"showConfirmationModal\"\n      title=\"Confirm Delete\"\n      message=\"Are you sure you want to delete this subscription plan?\"\n      @close=\"hideDeleteModal\"\n      @confirm=\"deletePlan\"\n    />\n\n    <edit-plan-modal\n      v-if=\"showEditPlanModal\"\n      :show=\"showEditPlanModal\"\n      :plan=\"selectedPlan\"\n      :languages=\"languages\"\n      :modes=\"modes\"\n      @close=\"hideEditPlanModal\"\n      @save=\"updatePlan\"\n    />\n  </div>\n</template>\n\n<script>\nimport subscriptionService from '../services/subscriptionService';\nimport confirmationModal from './ConfirmationModal.vue';\nimport editPlanModal from './EditPlanModal.vue';\n\nexport default {\n  components: {\n    confirmationModal,\n    editPlanModal\n  },\n  data() {\n    return {\n      subscriptionPlans: [],\n      languages: [],\n      modes: [],\n      newPlan: null,\n      selectedPlan: null,\n      showConfirmationModal: false,\n      showEditPlanModal: false,\n      planToDelete: null\n    };\n  },\n  created() {\n    this.loadPlans();\n    this.loadLanguages();\n    this.loadModes();\n  },\n  methods: {\n    loadPlans() {\n      subscriptionService.getPlans().then(response => {\n        this.subscriptionPlans = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscription plans!\", error);\n      });\n    },\n    loadLanguages() {\n      subscriptionService.getLanguages().then(response => {\n        this.languages = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscription languages!\", error);\n      });\n    },\n    loadModes() {\n      subscriptionService.getModes().then(response => {\n        this.modes = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscription modes!\", error);\n      });\n    },\n    addNewRow() {\n      this.newPlan = {\n        start_date: '',\n        subscription_price: '',\n        subscription_language: '',\n        subscription_mode: '',\n        duration_in_months: ''\n      };\n    },\n    saveNewPlan() {\n      const existingPlan = this.subscriptionPlans.find(plan =>\n        plan.duration_in_months === this.newPlan.duration_in_months &&\n        plan.subscription_language._id === this.newPlan.subscription_language &&\n        plan.subscription_mode._id === this.newPlan.subscription_mode\n      );\n\n      if (existingPlan) {\n        const version = parseInt(existingPlan.version.substring(1)) + 1;\n        this.newPlan.version = `v${version}`;\n        if (existingPlan.subscription_price == this.newPlan.subscription_price) {\n          alert('There is no change from the existing version.');\n        } else {\n          this.confirmVersionUpgrade(existingPlan, this.newPlan);\n        }\n      } else {\n        this.newPlan.version = 'v1';\n        this.newPlan.name = this.generateName(this.newPlan.duration_in_months, this.newPlan.subscription_language, this.newPlan.subscription_mode);\n        subscriptionService.createPlan(this.newPlan).then(() => {\n          this.loadPlans();\n          this.newPlan = null;\n        }).catch(error => {\n          console.error(\"There was an error creating the subscription plan!\", error);\n        });\n      }\n    },\n    cancelNewPlan() {\n      this.newPlan = null;\n    },\n    editPlan(plan) {\n      this.selectedPlan = { ...plan };\n      this.showEditPlanModal = true;\n    },\n    updatePlan(updatedPlan) {\n      subscriptionService.updatePlan(updatedPlan._id, updatedPlan).then(() => {\n        this.loadPlans();\n        this.hideEditPlanModal();\n      }).catch(error => {\n        console.error(\"There was an error updating the subscription plan!\", error);\n      });\n    },\n    confirmDeletePlan(planId) {\n      this.planToDelete = planId;\n      this.showConfirmationModal = true;\n    },\n    hideDeleteModal() {\n      this.showConfirmationModal = false;\n    },\n    deletePlan() {\n      if (this.planToDelete) {\n        subscriptionService.deletePlan(this.planToDelete).then(() => {\n          this.loadPlans();\n          this.hideDeleteModal();\n        }).catch(error => {\n          console.error(\"There was an error deleting the subscription plan!\", error);\n        });\n      }\n    },\n    hideEditPlanModal() {\n      this.showEditPlanModal = false;\n    },\n    generateName(duration, language, mode) {\n      const languageObj = this.languages.find(lang => lang._id === language);\n      const modeObj = this.modes.find(mod => mod._id === mode);\n      return `${duration} months - ${languageObj ? languageObj.name : ''} - ${modeObj ? modeObj.name : ''}`;\n    },\n    confirmVersionUpgrade(existingPlan, newPlan) {\n      if (confirm(`The subscription plan with the same combination already exists as version ${existingPlan.version}. Do you want to upgrade to version ${newPlan.version}?`)) {\n        this.newPlan.name = this.generateName(this.newPlan.duration_in_months, this.newPlan.subscription_language, this.newPlan.subscription_mode);\n        subscriptionService.createPlan(this.newPlan).then(() => {\n          this.loadPlans();\n          this.newPlan = null;\n        }).catch(error => {\n          console.error(\"There was an error creating the subscription plan!\", error);\n        });\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.table {\n  margin-top: 20px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}