{"ast":null,"code":"import subscriptionPlanService from '../services/subscriptionPlanService';\nimport subscriptionLanguageService from '../services/subscriptionLanguageService';\nimport subscriptionModeService from '../services/subscriptionModeService';\nexport default {\n  data() {\n    return {\n      subscriptionPlans: [],\n      subscriptionLanguages: [],\n      subscriptionModes: [],\n      addingNew: false,\n      newSubscriptionPlan: {\n        version: '',\n        name: '',\n        start_date: '',\n        subscription_price: 0,\n        subscription_language: '',\n        subscription_mode: '',\n        duration_in_months: 0\n      }\n    };\n  },\n  created() {\n    this.loadSubscriptionPlans();\n    this.loadSubscriptionLanguages();\n    this.loadSubscriptionModes();\n  },\n  methods: {\n    loadSubscriptionPlans() {\n      subscriptionPlanService.getSubscriptionPlans().then(response => {\n        this.subscriptionPlans = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscription plans!\", error);\n      });\n    },\n    loadSubscriptionLanguages() {\n      subscriptionLanguageService.getSubscriptionLanguages().then(response => {\n        this.subscriptionLanguages = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscription languages!\", error);\n      });\n    },\n    loadSubscriptionModes() {\n      subscriptionModeService.getSubscriptionModes().then(response => {\n        this.subscriptionModes = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscription modes!\", error);\n      });\n    },\n    startAddingNew() {\n      this.addingNew = true;\n      this.resetNewSubscriptionPlan();\n    },\n    cancelNewSubscriptionPlan() {\n      this.addingNew = false;\n    },\n    resetNewSubscriptionPlan() {\n      this.newSubscriptionPlan = {\n        version: '',\n        name: '',\n        start_date: '',\n        subscription_price: 0,\n        subscription_language: '',\n        subscription_mode: '',\n        duration_in_months: 0\n      };\n    },\n    saveNewSubscriptionPlan() {\n      subscriptionPlanService.createSubscriptionPlan(this.newSubscriptionPlan).then(() => {\n        this.loadSubscriptionPlans();\n        this.addingNew = false;\n      }).catch(error => {\n        console.error(\"There was an error saving the subscription plan!\", error);\n      });\n    },\n    getLanguageName(languageId) {\n      const language = this.subscriptionLanguages.find(lang => lang._id === languageId);\n      return language ? language.name : 'Unknown';\n    },\n    getModeName(modeId) {\n      const mode = this.subscriptionModes.find(mode => mode._id === modeId);\n      return mode ? mode.name : 'Unknown';\n    }\n  }\n};","map":{"version":3,"names":["subscriptionPlanService","subscriptionLanguageService","subscriptionModeService","data","subscriptionPlans","subscriptionLanguages","subscriptionModes","addingNew","newSubscriptionPlan","version","name","start_date","subscription_price","subscription_language","subscription_mode","duration_in_months","created","loadSubscriptionPlans","loadSubscriptionLanguages","loadSubscriptionModes","methods","getSubscriptionPlans","then","response","catch","error","console","getSubscriptionLanguages","getSubscriptionModes","startAddingNew","resetNewSubscriptionPlan","cancelNewSubscriptionPlan","saveNewSubscriptionPlan","createSubscriptionPlan","getLanguageName","languageId","language","find","lang","_id","getModeName","modeId","mode"],"sources":["C:\\Users\\santoshdesai\\Tattvachandrika\\tcenv-ui\\tattvachandrika-admin\\src\\components\\SubscriptionPlans.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-5\">\n    <h2>Subscription Plans</h2>\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><router-link to=\"/\">Home</router-link></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">Subscription Plans</li>\n      </ol>\n    </nav>\n\n    <table class=\"table table-striped mt-4\">\n      <thead>\n        <tr>\n          <th>Version</th>\n          <th>Name</th>\n          <th>Start Date</th>\n          <th>Price</th>\n          <th>Language</th>\n          <th>Mode</th>\n          <th>Duration (Months)</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-if=\"addingNew\">\n          <td><input type=\"text\" v-model=\"newSubscriptionPlan.version\" class=\"form-control\" /></td>\n          <td><input type=\"text\" v-model=\"newSubscriptionPlan.name\" class=\"form-control\" /></td>\n          <td><input type=\"date\" v-model=\"newSubscriptionPlan.start_date\" class=\"form-control\" /></td>\n          <td><input type=\"number\" v-model=\"newSubscriptionPlan.subscription_price\" class=\"form-control\" /></td>\n          <td>\n            <select v-model=\"newSubscriptionPlan.subscription_language\" class=\"form-control\">\n              <option v-for=\"language in subscriptionLanguages\" :key=\"language._id\" :value=\"language._id\">{{ language.name }}</option>\n            </select>\n          </td>\n          <td>\n            <select v-model=\"newSubscriptionPlan.subscription_mode\" class=\"form-control\">\n              <option v-for=\"mode in subscriptionModes\" :key=\"mode._id\" :value=\"mode._id\">{{ mode.name }}</option>\n            </select>\n          </td>\n          <td><input type=\"number\" v-model=\"newSubscriptionPlan.duration_in_months\" class=\"form-control\" /></td>\n          <td>\n            <button class=\"btn btn-primary btn-sm\" @click=\"saveNewSubscriptionPlan\">Save</button>\n            <button class=\"btn btn-secondary btn-sm\" @click=\"cancelNewSubscriptionPlan\">Cancel</button>\n          </td>\n        </tr>\n        <tr v-for=\"plan in subscriptionPlans\" :key=\"plan._id\">\n          <td>{{ plan.version }}</td>\n          <td>{{ plan.name }}</td>\n          <td>{{ plan.start_date }}</td>\n          <td>{{ plan.subscription_price }}</td>\n          <td>{{ getLanguageName(plan.subscription_language) }}</td>\n          <td>{{ getModeName(plan.subscription_mode) }}</td>\n          <td>{{ plan.duration_in_months }}</td>\n          <td>\n            <!-- Add actions like Edit/Delete here if needed -->\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <button class=\"btn btn-success mt-3\" @click=\"startAddingNew\">Add New Plan</button>\n  </div>\n</template>\n\n<script>\nimport subscriptionPlanService from '../services/subscriptionPlanService';\nimport subscriptionLanguageService from '../services/subscriptionLanguageService';\nimport subscriptionModeService from '../services/subscriptionModeService';\n\nexport default {\n  data() {\n    return {\n      subscriptionPlans: [],\n      subscriptionLanguages: [],\n      subscriptionModes: [],\n      addingNew: false,\n      newSubscriptionPlan: {\n        version: '',\n        name: '',\n        start_date: '',\n        subscription_price: 0,\n        subscription_language: '',\n        subscription_mode: '',\n        duration_in_months: 0\n      }\n    };\n  },\n  created() {\n    this.loadSubscriptionPlans();\n    this.loadSubscriptionLanguages();\n    this.loadSubscriptionModes();\n  },\n  methods: {\n    loadSubscriptionPlans() {\n      subscriptionPlanService.getSubscriptionPlans().then(response => {\n        this.subscriptionPlans = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscription plans!\", error);\n      });\n    },\n    loadSubscriptionLanguages() {\n      subscriptionLanguageService.getSubscriptionLanguages().then(response => {\n        this.subscriptionLanguages = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscription languages!\", error);\n      });\n    },\n    loadSubscriptionModes() {\n      subscriptionModeService.getSubscriptionModes().then(response => {\n        this.subscriptionModes = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscription modes!\", error);\n      });\n    },\n    startAddingNew() {\n      this.addingNew = true;\n      this.resetNewSubscriptionPlan();\n    },\n    cancelNewSubscriptionPlan() {\n      this.addingNew = false;\n    },\n    resetNewSubscriptionPlan() {\n      this.newSubscriptionPlan = {\n        version: '',\n        name: '',\n        start_date: '',\n        subscription_price: 0,\n        subscription_language: '',\n        subscription_mode: '',\n        duration_in_months: 0\n      };\n    },\n    saveNewSubscriptionPlan() {\n      subscriptionPlanService.createSubscriptionPlan(this.newSubscriptionPlan).then(() => {\n        this.loadSubscriptionPlans();\n        this.addingNew = false;\n      }).catch(error => {\n        console.error(\"There was an error saving the subscription plan!\", error);\n      });\n    },\n    getLanguageName(languageId) {\n      const language = this.subscriptionLanguages.find(lang => lang._id === languageId);\n      return language ? language.name : 'Unknown';\n    },\n    getModeName(modeId) {\n      const mode = this.subscriptionModes.find(mode => mode._id === modeId);\n      return mode ? mode.name : 'Unknown';\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}