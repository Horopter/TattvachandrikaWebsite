{"ast":null,"code":"import subscriberTypeService from '../services/subscriberTypeService';\nimport ConfirmationModal from './ConfirmationModal.vue';\nexport default {\n  components: {\n    ConfirmationModal\n  },\n  data() {\n    return {\n      subscriberTypes: [],\n      addingNew: false,\n      editMode: null,\n      showConfirmationModal: false,\n      typeToDelete: null,\n      newSubscriberType: {\n        name: ''\n      },\n      editSubscriberType: {\n        name: ''\n      }\n    };\n  },\n  created() {\n    this.loadSubscriberTypes();\n  },\n  methods: {\n    loadSubscriberTypes() {\n      subscriberTypeService.getSubscriberTypes().then(response => {\n        this.subscriberTypes = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscriber types!\", error);\n      });\n    },\n    startAddingNew() {\n      this.addingNew = true;\n      this.resetNewSubscriberType();\n    },\n    cancelNewSubscriberType() {\n      this.addingNew = false;\n    },\n    resetNewSubscriberType() {\n      this.newSubscriberType = {\n        name: ''\n      };\n    },\n    saveNewSubscriberType() {\n      subscriberTypeService.createSubscriberType(this.newSubscriberType).then(() => {\n        this.loadSubscriberTypes();\n        this.addingNew = false;\n      }).catch(error => {\n        console.error(\"There was an error saving the subscriber type!\", error);\n      });\n    },\n    editSubscriberTypeFunc(type) {\n      this.editMode = type._id;\n      this.editSubscriberType = {\n        ...type\n      };\n    },\n    cancelEdit() {\n      this.editMode = null;\n    },\n    updateSubscriberType(id) {\n      subscriberTypeService.updateSubscriberType(id, this.editSubscriberType).then(() => {\n        this.loadSubscriberTypes();\n        this.editMode = null;\n      }).catch(error => {\n        console.error(\"There was an error updating the subscriber type!\", error);\n      });\n    },\n    showDeleteModal(id) {\n      this.typeToDelete = id;\n      this.showConfirmationModal = true;\n    },\n    hideDeleteModal() {\n      this.showConfirmationModal = false;\n      this.typeToDelete = null;\n    },\n    deleteSubscriberType() {\n      subscriberTypeService.deleteSubscriberType(this.typeToDelete).then(() => {\n        this.loadSubscriberTypes();\n        this.hideDeleteModal();\n      }).catch(error => {\n        console.error(\"There was an error deleting the subscriber type!\", error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["subscriberTypeService","ConfirmationModal","components","data","subscriberTypes","addingNew","editMode","showConfirmationModal","typeToDelete","newSubscriberType","name","editSubscriberType","created","loadSubscriberTypes","methods","getSubscriberTypes","then","response","catch","error","console","startAddingNew","resetNewSubscriberType","cancelNewSubscriberType","saveNewSubscriberType","createSubscriberType","editSubscriberTypeFunc","type","_id","cancelEdit","updateSubscriberType","id","showDeleteModal","hideDeleteModal","deleteSubscriberType"],"sources":["C:\\Users\\santoshdesai\\Tattvachandrika\\tcenv-ui\\tattvachandrika-admin\\src\\components\\SubscriberTypes.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-5\">\n    <h2>Subscriber Types</h2>\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><router-link to=\"/\">Home</router-link></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">Subscriber Types</li>\n      </ol>\n    </nav>\n\n    <table class=\"table table-striped mt-4\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-if=\"addingNew\">\n          <td><input type=\"text\" v-model=\"newSubscriberType.name\" class=\"form-control\" /></td>\n          <td>\n            <button class=\"btn btn-primary btn-sm\" @click=\"saveNewSubscriberType\">Save</button>\n            <button class=\"btn btn-secondary btn-sm\" @click=\"cancelNewSubscriberType\">Cancel</button>\n          </td>\n        </tr>\n        <tr v-for=\"type in subscriberTypes\" :key=\"type._id\">\n          <template v-if=\"editMode === type._id\">\n            <td><input type=\"text\" v-model=\"editSubscriberType.name\" class=\"form-control\" /></td>\n            <td>\n              <button class=\"btn btn-primary btn-sm\" @click=\"updateSubscriberType(type._id)\">Save</button>\n              <button class=\"btn btn-secondary btn-sm\" @click=\"cancelEdit\">Cancel</button>\n            </td>\n          </template>\n          <template v-else>\n            <td>{{ type.name }}</td>\n            <td>\n              <button class=\"btn btn-warning btn-sm\" @click=\"editSubscriberTypeFunc(type)\">Edit</button>\n              <button class=\"btn btn-danger btn-sm\" @click=\"showDeleteModal(type._id)\">Delete</button>\n            </td>\n          </template>\n        </tr>\n      </tbody>\n    </table>\n    <button class=\"btn btn-success mt-3\" @click=\"startAddingNew\">Add New Type</button>\n\n    <confirmation-modal\n      v-if=\"showConfirmationModal\"\n      :show=\"showConfirmationModal\"\n      title=\"Confirm Delete\"\n      message=\"Are you sure you want to delete this subscriber type?\"\n      @close=\"hideDeleteModal\"\n      @confirm=\"deleteSubscriberType\"\n    />\n  </div>\n</template>\n\n<script>\nimport subscriberTypeService from '../services/subscriberTypeService';\nimport ConfirmationModal from './ConfirmationModal.vue';\n\nexport default {\n  components: {\n    ConfirmationModal\n  },\n  data() {\n    return {\n      subscriberTypes: [],\n      addingNew: false,\n      editMode: null,\n      showConfirmationModal: false,\n      typeToDelete: null,\n      newSubscriberType: {\n        name: ''\n      },\n      editSubscriberType: {\n        name: ''\n      }\n    };\n  },\n  created() {\n    this.loadSubscriberTypes();\n  },\n  methods: {\n    loadSubscriberTypes() {\n      subscriberTypeService.getSubscriberTypes().then(response => {\n        this.subscriberTypes = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscriber types!\", error);\n      });\n    },\n    startAddingNew() {\n      this.addingNew = true;\n      this.resetNewSubscriberType();\n    },\n    cancelNewSubscriberType() {\n      this.addingNew = false;\n    },\n    resetNewSubscriberType() {\n      this.newSubscriberType = {\n        name: ''\n      };\n    },\n    saveNewSubscriberType() {\n      subscriberTypeService.createSubscriberType(this.newSubscriberType).then(() => {\n        this.loadSubscriberTypes();\n        this.addingNew = false;\n      }).catch(error => {\n        console.error(\"There was an error saving the subscriber type!\", error);\n      });\n    },\n    editSubscriberTypeFunc(type) {\n      this.editMode = type._id;\n      this.editSubscriberType = { ...type };\n    },\n    cancelEdit() {\n      this.editMode = null;\n    },\n    updateSubscriberType(id) {\n      subscriberTypeService.updateSubscriberType(id, this.editSubscriberType).then(() => {\n        this.loadSubscriberTypes();\n        this.editMode = null;\n      }).catch(error => {\n        console.error(\"There was an error updating the subscriber type!\", error);\n      });\n    },\n    showDeleteModal(id) {\n      this.typeToDelete = id;\n      this.showConfirmationModal = true;\n    },\n    hideDeleteModal() {\n      this.showConfirmationModal = false;\n      this.typeToDelete = null;\n    },\n    deleteSubscriberType() {\n      subscriberTypeService.deleteSubscriberType(this.typeToDelete).then(() => {\n        this.loadSubscriberTypes();\n        this.hideDeleteModal();\n      }).catch(error => {\n        console.error(\"There was an error deleting the subscriber type!\", error);\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}