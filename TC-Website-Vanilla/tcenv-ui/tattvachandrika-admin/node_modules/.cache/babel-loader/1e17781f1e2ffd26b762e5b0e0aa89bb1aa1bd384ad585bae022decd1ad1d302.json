{"ast":null,"code":"export default {\n  props: {\n    show: Boolean,\n    subscription: Object,\n    plans: Array,\n    paymentModes: Array\n  },\n  data() {\n    return {\n      localSubscription: {\n        ...this.subscription\n      },\n      formattedStartDate: '',\n      formattedPaymentDate: ''\n    };\n  },\n  computed: {\n    modalTitle() {\n      return this.localSubscription && this.localSubscription._id ? 'Edit Subscription' : 'Add Subscription';\n    },\n    modalButton() {\n      return this.localSubscription && this.localSubscription._id ? 'Update' : 'Add';\n    }\n  },\n  watch: {\n    subscription(newVal) {\n      this.localSubscription = {\n        ...newVal\n      };\n      this.formattedStartDate = this.formatDateFromModel(this.localSubscription.start_date);\n      this.formattedPaymentDate = this.formatDateFromModel(this.localSubscription.payment_date);\n    }\n  },\n  methods: {\n    close() {\n      this.$emit('close');\n    },\n    handleSubmit() {\n      this.localSubscription.start_date = this.parseDate(this.formattedStartDate);\n      this.localSubscription.payment_date = this.parseDate(this.formattedPaymentDate);\n      this.$emit('save', this.localSubscription);\n      this.close();\n    },\n    formatDate(field) {\n      if (field === 'start_date') {\n        this.formattedStartDate = this.formatDateFromModel(this.localSubscription.start_date);\n      } else if (field === 'payment_date') {\n        this.formattedPaymentDate = this.formatDateFromModel(this.localSubscription.payment_date);\n      }\n    },\n    formatDateFromModel(date) {\n      if (!date) return '';\n      const [year, month, day] = date.split('-');\n      return `${day}-${month}-${year}`;\n    },\n    parseDate(dateStr) {\n      if (!dateStr) return '';\n      const [day, month, year] = dateStr.split('-');\n      return `${year}-${month}-${day}`;\n    },\n    showDatePicker(field) {\n      if (field === 'start_date') {\n        this.formattedStartDate = this.parseDate(this.formattedStartDate);\n      } else if (field === 'payment_date') {\n        this.formattedPaymentDate = this.parseDate(this.formattedPaymentDate);\n      }\n    }\n  }\n};","map":{"version":3,"names":["props","show","Boolean","subscription","Object","plans","Array","paymentModes","data","localSubscription","formattedStartDate","formattedPaymentDate","computed","modalTitle","_id","modalButton","watch","newVal","formatDateFromModel","start_date","payment_date","methods","close","$emit","handleSubmit","parseDate","formatDate","field","date","year","month","day","split","dateStr","showDatePicker"],"sources":["C:\\Users\\santoshdesai\\Tattvachandrika\\tcenv-ui\\tattvachandrika-admin\\src\\components\\AddEditSubscriptionModal.vue"],"sourcesContent":["<template>\r\n  <div v-if=\"show\" class=\"modal fade show\" tabindex=\"-1\" role=\"dialog\" style=\"display: block;\">\r\n    <div class=\"modal-dialog\" role=\"document\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\">{{ modalTitle }}</h5>\r\n          <button type=\"button\" class=\"close\" @click=\"close\" aria-label=\"Close\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <form @submit.prevent=\"handleSubmit\">\r\n            <div class=\"form-group\">\r\n              <label for=\"subscription_plan\">Subscription Plan</label>\r\n              <select class=\"form-control\" id=\"subscription_plan\" v-model=\"localSubscription.subscription_plan\" required>\r\n                <option v-for=\"plan in plans\" :value=\"plan._id\" :key=\"plan._id\">{{ plan.name }}</option>\r\n              </select>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"start_date\">Start Date</label>\r\n              <input type=\"text\" class=\"form-control\" id=\"start_date\" v-model=\"formattedStartDate\" @focus=\"showDatePicker('start_date')\" @blur=\"formatDate('start_date')\" required>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"payment_status\">Payment Status</label>\r\n              <select class=\"form-control\" id=\"payment_status\" v-model=\"localSubscription.payment_status\" required>\r\n                <option value=\"Pending\">Pending</option>\r\n                <option value=\"Successful\">Successful</option>\r\n              </select>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"payment_mode\">Payment Mode</label>\r\n              <select class=\"form-control\" id=\"payment_mode\" v-model=\"localSubscription.payment_mode\" required>\r\n                <option v-for=\"mode in paymentModes\" :value=\"mode._id\" :key=\"mode._id\">{{ mode.name }}</option>\r\n              </select>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"payment_date\">Payment Date</label>\r\n              <input type=\"text\" class=\"form-control\" id=\"payment_date\" v-model=\"formattedPaymentDate\" @focus=\"showDatePicker('payment_date')\" @blur=\"formatDate('payment_date')\" required>\r\n            </div>\r\n            <button type=\"submit\" class=\"btn btn-primary\">{{ modalButton }}</button>\r\n            <button type=\"button\" class=\"btn btn-secondary\" @click=\"close\">Cancel</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    show: Boolean,\r\n    subscription: Object,\r\n    plans: Array,\r\n    paymentModes: Array\r\n  },\r\n  data() {\r\n    return {\r\n      localSubscription: { ...this.subscription },\r\n      formattedStartDate: '',\r\n      formattedPaymentDate: ''\r\n    };\r\n  },\r\n  computed: {\r\n    modalTitle() {\r\n      return this.localSubscription && this.localSubscription._id ? 'Edit Subscription' : 'Add Subscription';\r\n    },\r\n    modalButton() {\r\n      return this.localSubscription && this.localSubscription._id ? 'Update' : 'Add';\r\n    }\r\n  },\r\n  watch: {\r\n    subscription(newVal) {\r\n      this.localSubscription = { ...newVal };\r\n      this.formattedStartDate = this.formatDateFromModel(this.localSubscription.start_date);\r\n      this.formattedPaymentDate = this.formatDateFromModel(this.localSubscription.payment_date);\r\n    }\r\n  },\r\n  methods: {\r\n    close() {\r\n      this.$emit('close');\r\n    },\r\n    handleSubmit() {\r\n      this.localSubscription.start_date = this.parseDate(this.formattedStartDate);\r\n      this.localSubscription.payment_date = this.parseDate(this.formattedPaymentDate);\r\n      this.$emit('save', this.localSubscription);\r\n      this.close();\r\n    },\r\n    formatDate(field) {\r\n      if (field === 'start_date') {\r\n        this.formattedStartDate = this.formatDateFromModel(this.localSubscription.start_date);\r\n      } else if (field === 'payment_date') {\r\n        this.formattedPaymentDate = this.formatDateFromModel(this.localSubscription.payment_date);\r\n      }\r\n    },\r\n    formatDateFromModel(date) {\r\n      if (!date) return '';\r\n      const [year, month, day] = date.split('-');\r\n      return `${day}-${month}-${year}`;\r\n    },\r\n    parseDate(dateStr) {\r\n      if (!dateStr) return '';\r\n      const [day, month, year] = dateStr.split('-');\r\n      return `${year}-${month}-${day}`;\r\n    },\r\n    showDatePicker(field) {\r\n      if (field === 'start_date') {\r\n        this.formattedStartDate = this.parseDate(this.formattedStartDate);\r\n      } else if (field === 'payment_date') {\r\n        this.formattedPaymentDate = this.parseDate(this.formattedPaymentDate);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.modal {\r\n  display: block;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}