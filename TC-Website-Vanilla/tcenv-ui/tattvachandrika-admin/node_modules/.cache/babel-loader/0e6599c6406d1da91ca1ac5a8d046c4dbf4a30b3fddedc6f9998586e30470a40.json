{"ast":null,"code":"import subscriptionModeService from '../services/subscriptionModeService';\nimport ConfirmationModal from './ConfirmationModal.vue';\nexport default {\n  components: {\n    ConfirmationModal\n  },\n  data() {\n    return {\n      subscriptionModes: [],\n      addingNew: false,\n      editMode: null,\n      showConfirmationModal: false,\n      modeToDelete: null,\n      newSubscriptionMode: {\n        name: ''\n      },\n      editSubscriptionMode: {\n        name: ''\n      }\n    };\n  },\n  created() {\n    this.loadSubscriptionModes();\n  },\n  methods: {\n    loadSubscriptionModes() {\n      subscriptionModeService.getSubscriptionModes().then(response => {\n        this.subscriptionModes = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscription modes!\", error);\n      });\n    },\n    startAddingNew() {\n      this.addingNew = true;\n      this.resetNewSubscriptionMode();\n    },\n    cancelNewSubscriptionMode() {\n      this.addingNew = false;\n    },\n    resetNewSubscriptionMode() {\n      this.newSubscriptionMode = {\n        name: ''\n      };\n    },\n    saveNewSubscriptionMode() {\n      subscriptionModeService.createSubscriptionMode(this.newSubscriptionMode).then(() => {\n        this.loadSubscriptionModes();\n        this.addingNew = false;\n      }).catch(error => {\n        console.error(\"There was an error saving the subscription mode!\", error);\n      });\n    },\n    editSubscriptionModeFunc(mode) {\n      this.editMode = mode._id;\n      this.editSubscriptionMode = {\n        ...mode\n      };\n    },\n    cancelEdit() {\n      this.editMode = null;\n    },\n    updateSubscriptionMode(id) {\n      subscriptionModeService.updateSubscriptionMode(id, this.editSubscriptionMode).then(() => {\n        this.loadSubscriptionModes();\n        this.editMode = null;\n      }).catch(error => {\n        console.error(\"There was an error updating the subscription mode!\", error);\n      });\n    },\n    showDeleteModal(id) {\n      this.modeToDelete = id;\n      this.showConfirmationModal = true;\n    },\n    hideDeleteModal() {\n      this.showConfirmationModal = false;\n      this.modeToDelete = null;\n    },\n    deleteSubscriptionMode() {\n      subscriptionModeService.deleteSubscriptionMode(this.modeToDelete).then(() => {\n        this.loadSubscriptionModes();\n        this.hideDeleteModal();\n      }).catch(error => {\n        console.error(\"There was an error deleting the subscription mode!\", error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["subscriptionModeService","ConfirmationModal","components","data","subscriptionModes","addingNew","editMode","showConfirmationModal","modeToDelete","newSubscriptionMode","name","editSubscriptionMode","created","loadSubscriptionModes","methods","getSubscriptionModes","then","response","catch","error","console","startAddingNew","resetNewSubscriptionMode","cancelNewSubscriptionMode","saveNewSubscriptionMode","createSubscriptionMode","editSubscriptionModeFunc","mode","_id","cancelEdit","updateSubscriptionMode","id","showDeleteModal","hideDeleteModal","deleteSubscriptionMode"],"sources":["C:\\Users\\santoshdesai\\Tattvachandrika\\tcenv-ui\\tattvachandrika-admin\\src\\components\\SubscriptionModes.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-5\">\n    <h2>Subscription Modes</h2>\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><router-link to=\"/\">Home</router-link></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">Subscription Modes</li>\n      </ol>\n    </nav>\n\n    <table class=\"table table-striped mt-4\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-if=\"addingNew\">\n          <td><input type=\"text\" v-model=\"newSubscriptionMode.name\" class=\"form-control\" /></td>\n          <td>\n            <button class=\"btn btn-primary btn-sm\" @click=\"saveNewSubscriptionMode\">Save</button>\n            <button class=\"btn btn-secondary btn-sm\" @click=\"cancelNewSubscriptionMode\">Cancel</button>\n          </td>\n        </tr>\n        <tr v-for=\"mode in subscriptionModes\" :key=\"mode._id\">\n          <template v-if=\"editMode === mode._id\">\n            <td><input type=\"text\" v-model=\"editSubscriptionMode.name\" class=\"form-control\" /></td>\n            <td>\n              <button class=\"btn btn-primary btn-sm\" @click=\"updateSubscriptionMode(mode._id)\">Save</button>\n              <button class=\"btn btn-secondary btn-sm\" @click=\"cancelEdit\">Cancel</button>\n            </td>\n          </template>\n          <template v-else>\n            <td>{{ mode.name }}</td>\n            <td>\n              <button class=\"btn btn-warning btn-sm\" @click=\"editSubscriptionModeFunc(mode)\">Edit</button>\n              <button class=\"btn btn-danger btn-sm\" @click=\"showDeleteModal(mode._id)\">Delete</button>\n            </td>\n          </template>\n        </tr>\n      </tbody>\n    </table>\n    <button class=\"btn btn-success mt-3\" @click=\"startAddingNew\">Add New Mode</button>\n\n    <confirmation-modal\n      v-if=\"showConfirmationModal\"\n      :show=\"showConfirmationModal\"\n      title=\"Confirm Delete\"\n      message=\"Are you sure you want to delete this subscription mode?\"\n      @close=\"hideDeleteModal\"\n      @confirm=\"deleteSubscriptionMode\"\n    />\n  </div>\n</template>\n\n<script>\nimport subscriptionModeService from '../services/subscriptionModeService';\nimport ConfirmationModal from './ConfirmationModal.vue';\n\nexport default {\n  components: {\n    ConfirmationModal\n  },\n  data() {\n    return {\n      subscriptionModes: [],\n      addingNew: false,\n      editMode: null,\n      showConfirmationModal: false,\n      modeToDelete: null,\n      newSubscriptionMode: {\n        name: ''\n      },\n      editSubscriptionMode: {\n        name: ''\n      }\n    };\n  },\n  created() {\n    this.loadSubscriptionModes();\n  },\n  methods: {\n    loadSubscriptionModes() {\n      subscriptionModeService.getSubscriptionModes().then(response => {\n        this.subscriptionModes = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscription modes!\", error);\n      });\n    },\n    startAddingNew() {\n      this.addingNew = true;\n      this.resetNewSubscriptionMode();\n    },\n    cancelNewSubscriptionMode() {\n      this.addingNew = false;\n    },\n    resetNewSubscriptionMode() {\n      this.newSubscriptionMode = {\n        name: ''\n      };\n    },\n    saveNewSubscriptionMode() {\n      subscriptionModeService.createSubscriptionMode(this.newSubscriptionMode).then(() => {\n        this.loadSubscriptionModes();\n        this.addingNew = false;\n      }).catch(error => {\n        console.error(\"There was an error saving the subscription mode!\", error);\n      });\n    },\n    editSubscriptionModeFunc(mode) {\n      this.editMode = mode._id;\n      this.editSubscriptionMode = { ...mode };\n    },\n    cancelEdit() {\n      this.editMode = null;\n    },\n    updateSubscriptionMode(id) {\n      subscriptionModeService.updateSubscriptionMode(id, this.editSubscriptionMode).then(() => {\n        this.loadSubscriptionModes();\n        this.editMode = null;\n      }).catch(error => {\n        console.error(\"There was an error updating the subscription mode!\", error);\n      });\n    },\n    showDeleteModal(id) {\n      this.modeToDelete = id;\n      this.showConfirmationModal = true;\n    },\n    hideDeleteModal() {\n      this.showConfirmationModal = false;\n      this.modeToDelete = null;\n    },\n    deleteSubscriptionMode() {\n      subscriptionModeService.deleteSubscriptionMode(this.modeToDelete).then(() => {\n        this.loadSubscriptionModes();\n        this.hideDeleteModal();\n      }).catch(error => {\n        console.error(\"There was an error deleting the subscription mode!\", error);\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}