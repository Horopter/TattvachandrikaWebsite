{"ast":null,"code":"import subscriptionPlanService from '../services/subscriptionPlanService';\nimport confirmationModal from './ConfirmationModal.vue';\nexport default {\n  components: {\n    confirmationModal\n  },\n  data() {\n    return {\n      plans: [],\n      // Array to hold subscription plans\n      languages: [],\n      // Array to hold available languages\n      modes: [],\n      // Array to hold available modes\n      editPlanId: null,\n      // ID of the plan currently being edited\n      showConfirmationModal: false,\n      // Boolean to control the visibility of the confirmation modal\n      planToDelete: null,\n      // ID of the plan to be deleted\n      isAddingNew: false // Flag to indicate if a new plan is being added\n    };\n  },\n  created() {\n    this.loadPlans();\n    this.loadLanguages();\n    this.loadModes();\n  },\n  methods: {\n    // Method to load subscription plans\n    loadPlans() {\n      subscriptionPlanService.getPlans().then(response => {\n        this.plans = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscription plans!\", error);\n      });\n    },\n    // Method to load languages\n    loadLanguages() {\n      subscriptionPlanService.getLanguages().then(response => {\n        this.languages = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the languages!\", error);\n      });\n    },\n    // Method to load modes\n    loadModes() {\n      subscriptionPlanService.getModes().then(response => {\n        this.modes = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the modes!\", error);\n      });\n    },\n    // Method to add a new plan\n    addPlan() {\n      const newPlan = {\n        _id: null,\n        // New plans do not have an _id yet\n        name: 'New Plan Name',\n        // Automatically populated name\n        version: '',\n        // Version will be determined when saving\n        start_date: '',\n        subscription_price: 0,\n        subscription_language: this.languages.length > 0 ? this.languages[0]._id : null,\n        subscription_mode: this.modes.length > 0 ? this.modes[0]._id : null,\n        duration_in_months: 0\n      };\n      this.plans.unshift(newPlan); // Add the new plan to the beginning of the plans array\n      this.editPlanId = newPlan._id; // Set the new plan as the one being edited\n      this.isAddingNew = true; // Indicate that a new plan is being added\n    },\n    // Method to edit an existing plan\n    editPlan(planId) {\n      this.editPlanId = planId; // Set the plan ID as the one being edited\n      this.isAddingNew = false; // Indicate that we are not adding a new plan\n    },\n    // Method to save a plan\n    async savePlan(plan) {\n      // Check for existing plans with the same duration, language, and mode\n      const existingPlans = this.plans.filter(p => p.duration_in_months === plan.duration_in_months && p.subscription_language === plan.subscription_language && p.subscription_mode === plan.subscription_mode);\n      if (existingPlans.length > 0) {\n        // Filter out invalid versions (NaN or null)\n        const validVersions = existingPlans.map(p => parseInt(p.version.replace('v', ''))).filter(v => !isNaN(v) && v !== null);\n        // Find the highest valid version and increment it\n        const highestVersion = validVersions.length > 0 ? Math.max(...validVersions) : 0;\n        plan.version = 'v' + (highestVersion + 1);\n      } else {\n        // If no existing plans with the same attributes, set version to v1\n        plan.version = 'v1';\n      }\n      const planData = {\n        ...plan,\n        subscription_language: plan.subscription_language,\n        subscription_mode: plan.subscription_mode\n      };\n      if (plan._id) {\n        // If the plan has an _id, update it\n        subscriptionPlanService.updatePlan(plan._id, planData).then(() => {\n          this.loadPlans(); // Reload the plans after updating\n          this.editPlanId = null; // Clear the edit plan ID\n        }).catch(error => {\n          console.error(\"There was an error updating the subscription plan!\", error);\n        });\n      } else {\n        // If the plan does not have an _id, create it\n        subscriptionPlanService.createPlan(planData).then(() => {\n          this.loadPlans(); // Reload the plans after creating\n          this.editPlanId = null; // Clear the edit plan ID\n          this.isAddingNew = false; // Indicate that we are no longer adding a new plan\n        }).catch(error => {\n          console.error(\"There was an error creating the subscription plan!\", error);\n        });\n      }\n    },\n    // Method to cancel adding a new plan\n    cancelAdd() {\n      this.plans.shift(); // Remove the new plan from the plans array\n      this.editPlanId = null; // Clear the edit plan ID\n      this.isAddingNew = false; // Indicate that we are no longer adding a new plan\n    },\n    // Method to confirm deletion of a plan\n    confirmDeletePlan(planId) {\n      this.planToDelete = planId; // Set the plan ID to be deleted\n      this.showConfirmationModal = true; // Show the confirmation modal\n    },\n    // Method to hide the delete confirmation modal\n    hideDeleteModal() {\n      this.showConfirmationModal = false; // Hide the confirmation modal\n    },\n    // Method to delete a plan\n    deletePlan() {\n      if (this.planToDelete) {\n        subscriptionPlanService.deletePlan(this.planToDelete).then(() => {\n          this.loadPlans(); // Reload the plans after deleting\n          this.hideDeleteModal(); // Hide the confirmation modal\n        }).catch(error => {\n          console.error(\"There was an error deleting the subscription plan!\", error);\n        });\n      }\n    },\n    // Method to get the name of a language by its ID\n    getLanguageName(languageId) {\n      const language = this.languages.find(lang => lang._id === languageId);\n      return language ? language.name : '';\n    },\n    // Method to get the name of a mode by its ID\n    getModeName(modeId) {\n      const mode = this.modes.find(m => m._id === modeId);\n      return mode ? mode.name : '';\n    }\n  }\n};","map":{"version":3,"names":["subscriptionPlanService","confirmationModal","components","data","plans","languages","modes","editPlanId","showConfirmationModal","planToDelete","isAddingNew","created","loadPlans","loadLanguages","loadModes","methods","getPlans","then","response","catch","error","console","getLanguages","getModes","addPlan","newPlan","_id","name","version","start_date","subscription_price","subscription_language","length","subscription_mode","duration_in_months","unshift","editPlan","planId","savePlan","plan","existingPlans","filter","p","validVersions","map","parseInt","replace","v","isNaN","highestVersion","Math","max","planData","updatePlan","createPlan","cancelAdd","shift","confirmDeletePlan","hideDeleteModal","deletePlan","getLanguageName","languageId","language","find","lang","getModeName","modeId","mode","m"],"sources":["C:\\Users\\santoshdesai\\Tattvachandrika\\tcenv-ui\\tattvachandrika-admin\\src\\components\\SubscriptionPlans.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mt-5\">\r\n    <!-- Breadcrumb navigation -->\r\n    <nav aria-label=\"breadcrumb\">\r\n      <ol class=\"breadcrumb\">\r\n        <li class=\"breadcrumb-item\"><router-link to=\"/\">Home</router-link></li>\r\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">Subscription Plans</li>\r\n      </ol>\r\n    </nav>\r\n\r\n    <!-- Page Title -->\r\n    <h2>Subscription Plans</h2>\r\n\r\n    <!-- Button to add a new subscription plan -->\r\n    <button class=\"btn btn-primary mb-3\" @click=\"addPlan\">Add Subscription Plan</button>\r\n\r\n    <!-- Table displaying the subscription plans -->\r\n    <table class=\"table table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Version</th>\r\n          <th>Start Date</th>\r\n          <th>Price</th>\r\n          <th>Language</th>\r\n          <th>Mode</th>\r\n          <th>Duration (Months)</th>\r\n          <th>Actions</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <!-- Iterate over each plan in plans array -->\r\n        <tr v-for=\"plan in plans\" :key=\"plan._id\">\r\n          <td>{{ plan.name }}</td>\r\n          <td>{{ plan.version }}</td>\r\n          <td>\r\n            <!-- Editable start date only when adding a new plan -->\r\n            <input v-if=\"editPlanId === plan._id && isAddingNew\" type=\"date\" v-model=\"plan.start_date\" />\r\n            <span v-else>{{ plan.start_date }}</span>\r\n          </td>\r\n          <td>\r\n            <!-- Editable price field -->\r\n            <input v-if=\"editPlanId === plan._id\" type=\"number\" v-model=\"plan.subscription_price\" />\r\n            <span v-else>{{ plan.subscription_price }}</span>\r\n          </td>\r\n          <td>\r\n            <!-- Editable language dropdown -->\r\n            <select v-if=\"editPlanId === plan._id\" v-model=\"plan.subscription_language\" :key=\"plan._id + '_language'\">\r\n              <option v-for=\"language in languages\" :value=\"language._id\" :key=\"language._id\">{{ language.name }}</option>\r\n            </select>\r\n            <span v-else>{{ getLanguageName(plan.subscription_language) }}</span>\r\n          </td>\r\n          <td>\r\n            <!-- Editable mode dropdown -->\r\n            <select v-if=\"editPlanId === plan._id\" v-model=\"plan.subscription_mode\" :key=\"plan._id + '_mode'\">\r\n              <option v-for=\"mode in modes\" :value=\"mode._id\" :key=\"mode._id\">{{ mode.name }}</option>\r\n            </select>\r\n            <span v-else>{{ getModeName(plan.subscription_mode) }}</span>\r\n          </td>\r\n          <td>\r\n            <!-- Editable duration field -->\r\n            <input v-if=\"editPlanId === plan._id\" type=\"number\" v-model=\"plan.duration_in_months\" />\r\n            <span v-else>{{ plan.duration_in_months }}</span>\r\n          </td>\r\n          <td>\r\n            <!-- Action buttons for save, edit, delete, and cancel -->\r\n            <button class=\"btn btn-success btn-sm\" v-if=\"editPlanId === plan._id\" @click=\"savePlan(plan)\">Save</button>\r\n            <button class=\"btn btn-warning btn-sm\" v-if=\"editPlanId !== plan._id\" @click=\"editPlan(plan._id)\">Edit</button>\r\n            <button class=\"btn btn-secondary btn-sm\" v-if=\"editPlanId === plan._id\" @click=\"cancelAdd\">Cancel</button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- Confirmation modal for deletion -->\r\n    <confirmation-modal\r\n      v-if=\"showConfirmationModal\"\r\n      :show=\"showConfirmationModal\"\r\n      title=\"Confirm Delete\"\r\n      message=\"Are you sure you want to delete this subscription plan?\"\r\n      @close=\"hideDeleteModal\"\r\n      @confirm=\"deletePlan\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport subscriptionPlanService from '../services/subscriptionPlanService';\r\nimport confirmationModal from './ConfirmationModal.vue';\r\n\r\nexport default {\r\n  components: {\r\n    confirmationModal\r\n  },\r\n  data() {\r\n    return {\r\n      plans: [], // Array to hold subscription plans\r\n      languages: [], // Array to hold available languages\r\n      modes: [], // Array to hold available modes\r\n      editPlanId: null, // ID of the plan currently being edited\r\n      showConfirmationModal: false, // Boolean to control the visibility of the confirmation modal\r\n      planToDelete: null, // ID of the plan to be deleted\r\n      isAddingNew: false // Flag to indicate if a new plan is being added\r\n    };\r\n  },\r\n  created() {\r\n    this.loadPlans();\r\n    this.loadLanguages();\r\n    this.loadModes();\r\n  },\r\n  methods: {\r\n    // Method to load subscription plans\r\n    loadPlans() {\r\n      subscriptionPlanService.getPlans().then(response => {\r\n        this.plans = response.data;\r\n      }).catch(error => {\r\n        console.error(\"There was an error retrieving the subscription plans!\", error);\r\n      });\r\n    },\r\n    // Method to load languages\r\n    loadLanguages() {\r\n      subscriptionPlanService.getLanguages().then(response => {\r\n        this.languages = response.data;\r\n      }).catch(error => {\r\n        console.error(\"There was an error retrieving the languages!\", error);\r\n      });\r\n    },\r\n    // Method to load modes\r\n    loadModes() {\r\n      subscriptionPlanService.getModes().then(response => {\r\n        this.modes = response.data;\r\n      }).catch(error => {\r\n        console.error(\"There was an error retrieving the modes!\", error);\r\n      });\r\n    },\r\n    // Method to add a new plan\r\n    addPlan() {\r\n      const newPlan = {\r\n        _id: null, // New plans do not have an _id yet\r\n        name: 'New Plan Name', // Automatically populated name\r\n        version: '', // Version will be determined when saving\r\n        start_date: '',\r\n        subscription_price: 0,\r\n        subscription_language: this.languages.length > 0 ? this.languages[0]._id : null,\r\n        subscription_mode: this.modes.length > 0 ? this.modes[0]._id : null,\r\n        duration_in_months: 0\r\n      };\r\n      this.plans.unshift(newPlan); // Add the new plan to the beginning of the plans array\r\n      this.editPlanId = newPlan._id; // Set the new plan as the one being edited\r\n      this.isAddingNew = true; // Indicate that a new plan is being added\r\n    },\r\n    // Method to edit an existing plan\r\n    editPlan(planId) {\r\n      this.editPlanId = planId; // Set the plan ID as the one being edited\r\n      this.isAddingNew = false; // Indicate that we are not adding a new plan\r\n    },\r\n    // Method to save a plan\r\n    async savePlan(plan) {\r\n      // Check for existing plans with the same duration, language, and mode\r\n      const existingPlans = this.plans.filter(p => \r\n        p.duration_in_months === plan.duration_in_months &&\r\n        p.subscription_language === plan.subscription_language &&\r\n        p.subscription_mode === plan.subscription_mode\r\n      );\r\n\r\n      if (existingPlans.length > 0) {\r\n        // Filter out invalid versions (NaN or null)\r\n        const validVersions = existingPlans.map(p => parseInt(p.version.replace('v', ''))).filter(v => !isNaN(v) && v !== null);\r\n        // Find the highest valid version and increment it\r\n        const highestVersion = validVersions.length > 0 ? Math.max(...validVersions) : 0;\r\n        plan.version = 'v' + (highestVersion + 1);\r\n      } else {\r\n        // If no existing plans with the same attributes, set version to v1\r\n        plan.version = 'v1';\r\n      }\r\n\r\n      const planData = {\r\n        ...plan,\r\n        subscription_language: plan.subscription_language,\r\n        subscription_mode: plan.subscription_mode\r\n      };\r\n      if (plan._id) {\r\n        // If the plan has an _id, update it\r\n        subscriptionPlanService.updatePlan(plan._id, planData).then(() => {\r\n          this.loadPlans(); // Reload the plans after updating\r\n          this.editPlanId = null; // Clear the edit plan ID\r\n        }).catch(error => {\r\n          console.error(\"There was an error updating the subscription plan!\", error);\r\n        });\r\n      } else {\r\n        // If the plan does not have an _id, create it\r\n        subscriptionPlanService.createPlan(planData).then(() => {\r\n          this.loadPlans(); // Reload the plans after creating\r\n          this.editPlanId = null; // Clear the edit plan ID\r\n          this.isAddingNew = false; // Indicate that we are no longer adding a new plan\r\n        }).catch(error => {\r\n          console.error(\"There was an error creating the subscription plan!\", error);\r\n        });\r\n      }\r\n    },\r\n    // Method to cancel adding a new plan\r\n    cancelAdd() {\r\n      this.plans.shift(); // Remove the new plan from the plans array\r\n      this.editPlanId = null; // Clear the edit plan ID\r\n      this.isAddingNew = false; // Indicate that we are no longer adding a new plan\r\n    },\r\n    // Method to confirm deletion of a plan\r\n    confirmDeletePlan(planId) {\r\n      this.planToDelete = planId; // Set the plan ID to be deleted\r\n      this.showConfirmationModal = true; // Show the confirmation modal\r\n    },\r\n    // Method to hide the delete confirmation modal\r\n    hideDeleteModal() {\r\n      this.showConfirmationModal = false; // Hide the confirmation modal\r\n    },\r\n    // Method to delete a plan\r\n    deletePlan() {\r\n      if (this.planToDelete) {\r\n        subscriptionPlanService.deletePlan(this.planToDelete).then(() => {\r\n          this.loadPlans(); // Reload the plans after deleting\r\n          this.hideDeleteModal(); // Hide the confirmation modal\r\n        }).catch(error => {\r\n          console.error(\"There was an error deleting the subscription plan!\", error);\r\n        });\r\n      }\r\n    },\r\n    // Method to get the name of a language by its ID\r\n    getLanguageName(languageId) {\r\n      const language = this.languages.find(lang => lang._id === languageId);\r\n      return language ? language.name : '';\r\n    },\r\n    // Method to get the name of a mode by its ID\r\n    getModeName(modeId) {\r\n      const mode = this.modes.find(m => m._id === modeId);\r\n      return mode ? mode.name : '';\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Custom styles for the component */\r\n.table {\r\n  margin-top: 20px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}