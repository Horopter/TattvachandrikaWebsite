{"ast":null,"code":"import subscriptionPlanService from '../services/subscriptionPlanService';\nimport confirmationModal from './ConfirmationModal.vue';\nexport default {\n  components: {\n    confirmationModal\n  },\n  data() {\n    return {\n      plans: [],\n      languages: [],\n      modes: [],\n      editPlanId: null,\n      showConfirmationModal: false,\n      planToDelete: null,\n      isAddingNew: false // New flag to track if a new plan is being added\n    };\n  },\n  created() {\n    this.loadPlans();\n    this.loadLanguages();\n    this.loadModes();\n  },\n  methods: {\n    loadPlans() {\n      subscriptionPlanService.getPlans().then(response => {\n        this.plans = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscription plans!\", error);\n      });\n    },\n    loadLanguages() {\n      subscriptionPlanService.getLanguages().then(response => {\n        this.languages = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the languages!\", error);\n      });\n    },\n    loadModes() {\n      subscriptionPlanService.getModes().then(response => {\n        this.modes = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the modes!\", error);\n      });\n    },\n    addPlan() {\n      const newPlan = {\n        _id: null,\n        // Assuming new plans do not have an _id yet\n        name: '',\n        version: '',\n        start_date: '',\n        subscription_price: 0,\n        subscription_language: this.languages[0]._id,\n        subscription_mode: this.modes[0]._id,\n        duration_in_months: 0\n      };\n      this.plans.unshift(newPlan);\n      this.editPlanId = newPlan._id;\n      this.isAddingNew = true;\n    },\n    editPlan(planId) {\n      this.editPlanId = planId;\n      this.isAddingNew = false;\n    },\n    savePlan(plan) {\n      const planData = {\n        ...plan,\n        subscription_language: plan.subscription_language,\n        subscription_mode: plan.subscription_mode\n      };\n      if (plan._id) {\n        subscriptionPlanService.updatePlan(plan._id, planData).then(() => {\n          this.loadPlans();\n          this.editPlanId = null;\n        }).catch(error => {\n          console.error(\"There was an error updating the subscription plan!\", error);\n        });\n      } else {\n        subscriptionPlanService.createPlan(planData).then(() => {\n          this.loadPlans();\n          this.editPlanId = null;\n          this.isAddingNew = false;\n        }).catch(error => {\n          console.error(\"There was an error creating the subscription plan!\", error);\n        });\n      }\n    },\n    cancelAdd() {\n      this.plans.shift(); // Remove the first element (new plan) from the list\n      this.editPlanId = null;\n      this.isAddingNew = false;\n    },\n    confirmDeletePlan(planId) {\n      this.planToDelete = planId;\n      this.showConfirmationModal = true;\n    },\n    hideDeleteModal() {\n      this.showConfirmationModal = false;\n    },\n    deletePlan() {\n      if (this.planToDelete) {\n        subscriptionPlanService.deletePlan(this.planToDelete).then(() => {\n          this.loadPlans();\n          this.hideDeleteModal();\n        }).catch(error => {\n          console.error(\"There was an error deleting the subscription plan!\", error);\n        });\n      }\n    },\n    getLanguageName(languageId) {\n      const language = this.languages.find(lang => lang._id === languageId);\n      return language ? language.name : '';\n    },\n    getModeName(modeId) {\n      const mode = this.modes.find(m => m._id === modeId);\n      return mode ? mode.name : '';\n    }\n  }\n};","map":{"version":3,"names":["subscriptionPlanService","confirmationModal","components","data","plans","languages","modes","editPlanId","showConfirmationModal","planToDelete","isAddingNew","created","loadPlans","loadLanguages","loadModes","methods","getPlans","then","response","catch","error","console","getLanguages","getModes","addPlan","newPlan","_id","name","version","start_date","subscription_price","subscription_language","subscription_mode","duration_in_months","unshift","editPlan","planId","savePlan","plan","planData","updatePlan","createPlan","cancelAdd","shift","confirmDeletePlan","hideDeleteModal","deletePlan","getLanguageName","languageId","language","find","lang","getModeName","modeId","mode","m"],"sources":["C:\\Users\\santoshdesai\\Tattvachandrika\\tcenv-ui\\tattvachandrika-admin\\src\\components\\SubscriptionPlans.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mt-5\">\r\n    <nav aria-label=\"breadcrumb\">\r\n      <ol class=\"breadcrumb\">\r\n        <li class=\"breadcrumb-item\"><router-link to=\"/\">Home</router-link></li>\r\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">Subscription Plans</li>\r\n      </ol>\r\n    </nav>\r\n    <h2>Subscription Plans</h2>\r\n    <button class=\"btn btn-primary mb-3\" @click=\"addPlan\">Add Subscription Plan</button>\r\n    <table class=\"table table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Version</th>\r\n          <th>Start Date</th>\r\n          <th>Price</th>\r\n          <th>Language</th>\r\n          <th>Mode</th>\r\n          <th>Duration (Months)</th>\r\n          <th>Actions</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"plan in plans\" :key=\"plan._id\">\r\n          <td>{{ plan.name }}</td>\r\n          <td>{{ plan.version }}</td>\r\n          <td>\r\n            <input v-if=\"editPlanId === plan._id && isAddingNew\" type=\"date\" v-model=\"plan.start_date\" />\r\n            <span v-else>{{ plan.start_date }}</span>\r\n          </td>\r\n          <td>\r\n            <input v-if=\"editPlanId === plan._id\" type=\"number\" v-model=\"plan.subscription_price\" />\r\n            <span v-else>{{ plan.subscription_price }}</span>\r\n          </td>\r\n          <td>\r\n            <select v-if=\"editPlanId === plan._id\" v-model=\"plan.subscription_language\" :key=\"plan._id + '_language'\">\r\n              <option v-for=\"language in languages\" :value=\"language._id\" :key=\"language._id\">{{ language.name }}</option>\r\n            </select>\r\n            <span v-else>{{ getLanguageName(plan.subscription_language) }}</span>\r\n          </td>\r\n          <td>\r\n            <select v-if=\"editPlanId === plan._id\" v-model=\"plan.subscription_mode\" :key=\"plan._id + '_mode'\">\r\n              <option v-for=\"mode in modes\" :value=\"mode._id\" :key=\"mode._id\">{{ mode.name }}</option>\r\n            </select>\r\n            <span v-else>{{ getModeName(plan.subscription_mode) }}</span>\r\n          </td>\r\n          <td>\r\n            <input v-if=\"editPlanId === plan._id\" type=\"number\" v-model=\"plan.duration_in_months\" />\r\n            <span v-else>{{ plan.duration_in_months }}</span>\r\n          </td>\r\n          <td>\r\n            <button class=\"btn btn-success btn-sm\" v-if=\"editPlanId === plan._id\" @click=\"savePlan(plan)\">Save</button>\r\n            <button class=\"btn btn-warning btn-sm\" v-if=\"editPlanId !== plan._id\" @click=\"editPlan(plan._id)\">Edit</button>\r\n            <button class=\"btn btn-danger btn-sm\" v-if=\"editPlanId === plan._id && !isAddingNew\" @click=\"confirmDeletePlan(plan._id)\">Delete</button>\r\n            <button class=\"btn btn-secondary btn-sm\" v-if=\"editPlanId === plan._id && isAddingNew\" @click=\"cancelAdd\">Cancel</button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <confirmation-modal\r\n      v-if=\"showConfirmationModal\"\r\n      :show=\"showConfirmationModal\"\r\n      title=\"Confirm Delete\"\r\n      message=\"Are you sure you want to delete this subscription plan?\"\r\n      @close=\"hideDeleteModal\"\r\n      @confirm=\"deletePlan\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport subscriptionPlanService from '../services/subscriptionPlanService';\r\nimport confirmationModal from './ConfirmationModal.vue';\r\n\r\nexport default {\r\n  components: {\r\n    confirmationModal\r\n  },\r\n  data() {\r\n    return {\r\n      plans: [],\r\n      languages: [],\r\n      modes: [],\r\n      editPlanId: null,\r\n      showConfirmationModal: false,\r\n      planToDelete: null,\r\n      isAddingNew: false // New flag to track if a new plan is being added\r\n    };\r\n  },\r\n  created() {\r\n    this.loadPlans();\r\n    this.loadLanguages();\r\n    this.loadModes();\r\n  },\r\n  methods: {\r\n    loadPlans() {\r\n      subscriptionPlanService.getPlans().then(response => {\r\n        this.plans = response.data;\r\n      }).catch(error => {\r\n        console.error(\"There was an error retrieving the subscription plans!\", error);\r\n      });\r\n    },\r\n    loadLanguages() {\r\n      subscriptionPlanService.getLanguages().then(response => {\r\n        this.languages = response.data;\r\n      }).catch(error => {\r\n        console.error(\"There was an error retrieving the languages!\", error);\r\n      });\r\n    },\r\n    loadModes() {\r\n      subscriptionPlanService.getModes().then(response => {\r\n        this.modes = response.data;\r\n      }).catch(error => {\r\n        console.error(\"There was an error retrieving the modes!\", error);\r\n      });\r\n    },\r\n    addPlan() {\r\n      const newPlan = {\r\n        _id: null, // Assuming new plans do not have an _id yet\r\n        name: '',\r\n        version: '',\r\n        start_date: '',\r\n        subscription_price: 0,\r\n        subscription_language: this.languages[0]._id,\r\n        subscription_mode: this.modes[0]._id,\r\n        duration_in_months: 0\r\n      };\r\n      this.plans.unshift(newPlan);\r\n      this.editPlanId = newPlan._id;\r\n      this.isAddingNew = true;\r\n    },\r\n    editPlan(planId) {\r\n      this.editPlanId = planId;\r\n      this.isAddingNew = false;\r\n    },\r\n    savePlan(plan) {\r\n      const planData = {\r\n        ...plan,\r\n        subscription_language: plan.subscription_language,\r\n        subscription_mode: plan.subscription_mode\r\n      };\r\n      if (plan._id) {\r\n        subscriptionPlanService.updatePlan(plan._id, planData).then(() => {\r\n          this.loadPlans();\r\n          this.editPlanId = null;\r\n        }).catch(error => {\r\n          console.error(\"There was an error updating the subscription plan!\", error);\r\n        });\r\n      } else {\r\n        subscriptionPlanService.createPlan(planData).then(() => {\r\n          this.loadPlans();\r\n          this.editPlanId = null;\r\n          this.isAddingNew = false;\r\n        }).catch(error => {\r\n          console.error(\"There was an error creating the subscription plan!\", error);\r\n        });\r\n      }\r\n    },\r\n    cancelAdd() {\r\n      this.plans.shift(); // Remove the first element (new plan) from the list\r\n      this.editPlanId = null;\r\n      this.isAddingNew = false;\r\n    },\r\n    confirmDeletePlan(planId) {\r\n      this.planToDelete = planId;\r\n      this.showConfirmationModal = true;\r\n    },\r\n    hideDeleteModal() {\r\n      this.showConfirmationModal = false;\r\n    },\r\n    deletePlan() {\r\n      if (this.planToDelete) {\r\n        subscriptionPlanService.deletePlan(this.planToDelete).then(() => {\r\n          this.loadPlans();\r\n          this.hideDeleteModal();\r\n        }).catch(error => {\r\n          console.error(\"There was an error deleting the subscription plan!\", error);\r\n        });\r\n      }\r\n    },\r\n    getLanguageName(languageId) {\r\n      const language = this.languages.find(lang => lang._id === languageId);\r\n      return language ? language.name : '';\r\n    },\r\n    getModeName(modeId) {\r\n      const mode = this.modes.find(m => m._id === modeId);\r\n      return mode ? mode.name : '';\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.table {\r\n  margin-top: 20px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}