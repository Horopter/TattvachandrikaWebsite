{"ast":null,"code":"import subscriptionPlanService from '../services/subscriptionPlanService';\nimport paymentModeService from '../services/paymentModeService';\nexport default {\n  props: {\n    show: Boolean,\n    subscription: Object\n  },\n  data() {\n    return {\n      localSubscription: {\n        ...this.subscription\n      },\n      subscriptionPlans: [],\n      paymentModes: [],\n      showConfirmationModal: false\n    };\n  },\n  computed: {\n    modalTitle() {\n      return this.localSubscription && this.localSubscription._id ? 'Edit Subscription' : 'Add Subscription';\n    },\n    modalButton() {\n      return this.localSubscription && this.localSubscription._id ? 'Update' : 'Add';\n    }\n  },\n  watch: {\n    subscription(newVal) {\n      this.localSubscription = {\n        ...newVal\n      };\n    }\n  },\n  created() {\n    this.loadSubscriptionPlans();\n    this.loadPaymentModes();\n  },\n  methods: {\n    close() {\n      this.$emit('close');\n    },\n    handleSubmit() {\n      this.localSubscription.subscription_plan = this.subscriptionPlans.find(plan => plan._id === this.localSubscription.subscription_plan);\n      this.localSubscription.payment_mode = this.paymentModes.find(mode => mode._id === this.localSubscription.payment_mode);\n      this.$emit('save', this.localSubscription);\n      this.close();\n    },\n    loadSubscriptionPlans() {\n      subscriptionPlanService.getPlans().then(response => {\n        this.subscriptionPlans = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscription plans!\", error);\n      });\n    },\n    loadPaymentModes() {\n      paymentModeService.getPaymentModes().then(response => {\n        this.paymentModes = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the payment modes!\", error);\n      });\n    },\n    confirmPaymentStatus() {\n      if (this.localSubscription.payment_status === 'Paid') {\n        this.showConfirmationModal = true;\n      }\n    },\n    handleConfirmation(confirm) {\n      if (confirm) {\n        this.localSubscription.payment_status = 'Paid';\n      } else {\n        this.localSubscription.payment_status = 'Pending';\n      }\n      this.showConfirmationModal = false;\n    }\n  }\n};","map":{"version":3,"names":["subscriptionPlanService","paymentModeService","props","show","Boolean","subscription","Object","data","localSubscription","subscriptionPlans","paymentModes","showConfirmationModal","computed","modalTitle","_id","modalButton","watch","newVal","created","loadSubscriptionPlans","loadPaymentModes","methods","close","$emit","handleSubmit","subscription_plan","find","plan","payment_mode","mode","getPlans","then","response","catch","error","console","getPaymentModes","confirmPaymentStatus","payment_status","handleConfirmation","confirm"],"sources":["C:\\Users\\santoshdesai\\Tattvachandrika\\tcenv-ui\\tattvachandrika-admin\\src\\components\\AddEditSubscriptionModal.vue"],"sourcesContent":["<template>\r\n  <div v-if=\"show\" class=\"modal fade show\" tabindex=\"-1\" role=\"dialog\" style=\"display: block;\">\r\n    <div class=\"modal-dialog\" role=\"document\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\">{{ modalTitle }}</h5>\r\n          <button type=\"button\" class=\"close\" @click=\"close\" aria-label=\"Close\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <form @submit.prevent=\"handleSubmit\">\r\n            <div class=\"form-group\">\r\n              <label for=\"start_date\">Start Date</label>\r\n              <input type=\"date\" class=\"form-control\" id=\"start_date\" v-model=\"localSubscription.start_date\" required>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"subscription_plan\">Subscription Plan</label>\r\n              <select class=\"form-control\" id=\"subscription_plan\" v-model=\"localSubscription.subscription_plan\" required>\r\n                <option v-for=\"plan in subscriptionPlans\" :value=\"plan._id\" :key=\"plan._id\">{{ plan.name }}</option>\r\n              </select>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"payment_status\">Payment Status</label>\r\n              <select class=\"form-control\" id=\"payment_status\" v-model=\"localSubscription.payment_status\" required @change=\"confirmPaymentStatus\">\r\n                <option value=\"Pending\">Pending</option>\r\n                <option value=\"Failed\">Failed</option>\r\n                <option value=\"Paid\">Paid</option>\r\n              </select>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"payment_mode\">Payment Mode</label>\r\n              <select class=\"form-control\" id=\"payment_mode\" v-model=\"localSubscription.payment_mode\" required>\r\n                <option v-for=\"mode in paymentModes\" :value=\"mode._id\" :key=\"mode._id\">{{ mode.name }}</option>\r\n              </select>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"payment_date\">Payment Date</label>\r\n              <input type=\"date\" class=\"form-control\" id=\"payment_date\" v-model=\"localSubscription.payment_date\" required>\r\n            </div>\r\n            <button type=\"submit\" class=\"btn btn-primary\">{{ modalButton }}</button>\r\n            <button type=\"button\" class=\"btn btn-secondary\" @click=\"close\">Cancel</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport subscriptionPlanService from '../services/subscriptionPlanService';\r\nimport paymentModeService from '../services/paymentModeService';\r\n\r\nexport default {\r\n  props: {\r\n    show: Boolean,\r\n    subscription: Object\r\n  },\r\n  data() {\r\n    return {\r\n      localSubscription: { ...this.subscription },\r\n      subscriptionPlans: [],\r\n      paymentModes: [],\r\n      showConfirmationModal: false\r\n    };\r\n  },\r\n  computed: {\r\n    modalTitle() {\r\n      return this.localSubscription && this.localSubscription._id ? 'Edit Subscription' : 'Add Subscription';\r\n    },\r\n    modalButton() {\r\n      return this.localSubscription && this.localSubscription._id ? 'Update' : 'Add';\r\n    }\r\n  },\r\n  watch: {\r\n    subscription(newVal) {\r\n      this.localSubscription = { ...newVal };\r\n    }\r\n  },\r\n  created() {\r\n    this.loadSubscriptionPlans();\r\n    this.loadPaymentModes();\r\n  },\r\n  methods: {\r\n    close() {\r\n      this.$emit('close');\r\n    },\r\n    handleSubmit() {\r\n      this.localSubscription.subscription_plan = this.subscriptionPlans.find(plan => plan._id === this.localSubscription.subscription_plan);\r\n      this.localSubscription.payment_mode = this.paymentModes.find(mode => mode._id === this.localSubscription.payment_mode);\r\n      this.$emit('save', this.localSubscription);\r\n      this.close();\r\n    },\r\n    loadSubscriptionPlans() {\r\n      subscriptionPlanService.getPlans().then(response => {\r\n        this.subscriptionPlans = response.data;\r\n      }).catch(error => {\r\n        console.error(\"There was an error retrieving the subscription plans!\", error);\r\n      });\r\n    },\r\n    loadPaymentModes() {\r\n      paymentModeService.getPaymentModes().then(response => {\r\n        this.paymentModes = response.data;\r\n      }).catch(error => {\r\n        console.error(\"There was an error retrieving the payment modes!\", error);\r\n      });\r\n    },\r\n    confirmPaymentStatus() {\r\n      if (this.localSubscription.payment_status === 'Paid') {\r\n        this.showConfirmationModal = true;\r\n      }\r\n    },\r\n    handleConfirmation(confirm) {\r\n      if (confirm) {\r\n        this.localSubscription.payment_status = 'Paid';\r\n      } else {\r\n        this.localSubscription.payment_status = 'Pending';\r\n      }\r\n      this.showConfirmationModal = false;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.modal {\r\n  display: block;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}