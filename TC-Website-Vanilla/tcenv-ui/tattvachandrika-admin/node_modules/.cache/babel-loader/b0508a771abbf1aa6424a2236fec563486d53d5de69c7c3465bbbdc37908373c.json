{"ast":null,"code":"import subscriptionService from '../services/subscriptionService';\nimport confirmationModal from './ConfirmationModal.vue';\nimport editPlanModal from './EditPlanModal.vue';\nexport default {\n  components: {\n    confirmationModal,\n    editPlanModal\n  },\n  data() {\n    return {\n      plans: [],\n      languages: [],\n      modes: [],\n      selectedPlan: null,\n      showPlanModal: false,\n      showConfirmationModal: false,\n      planToDelete: null\n    };\n  },\n  created() {\n    this.loadPlans();\n    this.loadLanguages();\n    this.loadModes();\n  },\n  methods: {\n    loadPlans() {\n      subscriptionService.getPlans().then(response => {\n        this.plans = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscription plans!\", error);\n      });\n    },\n    loadLanguages() {\n      subscriptionService.getLanguages().then(response => {\n        this.languages = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the languages!\", error);\n      });\n    },\n    loadModes() {\n      subscriptionService.getModes().then(response => {\n        this.modes = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the modes!\", error);\n      });\n    },\n    showAddPlanModal() {\n      this.selectedPlan = null;\n      this.showPlanModal = true;\n    },\n    editPlan(plan) {\n      this.selectedPlan = {\n        ...plan,\n        subscription_language: plan.subscription_language._id,\n        subscription_mode: plan.subscription_mode._id\n      };\n      this.showPlanModal = true;\n    },\n    savePlan(plan) {\n      if (plan._id) {\n        subscriptionService.updatePlan(plan._id, plan).then(() => {\n          this.loadPlans();\n          this.hidePlanModal();\n        }).catch(error => {\n          console.error(\"There was an error updating the subscription plan!\", error);\n        });\n      } else {\n        subscriptionService.createPlan(plan).then(() => {\n          this.loadPlans();\n          this.hidePlanModal();\n        }).catch(error => {\n          console.error(\"There was an error creating the subscription plan!\", error);\n        });\n      }\n    },\n    confirmDeletePlan(planId) {\n      this.planToDelete = planId;\n      this.showConfirmationModal = true;\n    },\n    hideDeleteModal() {\n      this.showConfirmationModal = false;\n    },\n    deletePlan() {\n      if (this.planToDelete) {\n        subscriptionService.deletePlan(this.planToDelete).then(() => {\n          this.loadPlans();\n          this.hideDeleteModal();\n        }).catch(error => {\n          console.error(\"There was an error deleting the subscription plan!\", error);\n        });\n      }\n    },\n    hidePlanModal() {\n      this.showPlanModal = false;\n    }\n  }\n};","map":{"version":3,"names":["subscriptionService","confirmationModal","editPlanModal","components","data","plans","languages","modes","selectedPlan","showPlanModal","showConfirmationModal","planToDelete","created","loadPlans","loadLanguages","loadModes","methods","getPlans","then","response","catch","error","console","getLanguages","getModes","showAddPlanModal","editPlan","plan","subscription_language","_id","subscription_mode","savePlan","updatePlan","hidePlanModal","createPlan","confirmDeletePlan","planId","hideDeleteModal","deletePlan"],"sources":["C:\\Users\\santoshdesai\\Tattvachandrika\\tcenv-ui\\tattvachandrika-admin\\src\\components\\SubscriptionPlans.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-5\">\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><router-link to=\"/\">Home</router-link></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">Subscription Plans</li>\n      </ol>\n    </nav>\n    <h2>Subscription Plans</h2>\n    <button class=\"btn btn-primary mb-3\" @click=\"showAddPlanModal\">Add Subscription Plan</button>\n    <table class=\"table table-striped\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Version</th>\n          <th>Start Date</th>\n          <th>Price</th>\n          <th>Language</th>\n          <th>Mode</th>\n          <th>Duration (Months)</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"plan in plans\" :key=\"plan._id\">\n          <td>{{ plan.name }}</td>\n          <td>{{ plan.version }}</td>\n          <td>{{ plan.start_date }}</td>\n          <td>{{ plan.subscription_price }}</td>\n          <td>{{ plan.subscription_language.name }}</td>\n          <td>{{ plan.subscription_mode.name }}</td>\n          <td>{{ plan.duration_in_months }}</td>\n          <td>\n            <button class=\"btn btn-warning btn-sm\" @click=\"editPlan(plan)\">Edit</button>\n            <button class=\"btn btn-danger btn-sm\" @click=\"confirmDeletePlan(plan._id)\">Delete</button>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n\n    <confirmation-modal\n      v-if=\"showConfirmationModal\"\n      :show=\"showConfirmationModal\"\n      title=\"Confirm Delete\"\n      message=\"Are you sure you want to delete this subscription plan?\"\n      @close=\"hideDeleteModal\"\n      @confirm=\"deletePlan\"\n    />\n\n    <edit-plan-modal\n      v-if=\"showPlanModal\"\n      :show=\"showPlanModal\"\n      :plan=\"selectedPlan\"\n      :languages=\"languages\"\n      :modes=\"modes\"\n      @close=\"hidePlanModal\"\n      @save=\"savePlan\"\n    />\n  </div>\n</template>\n\n<script>\nimport subscriptionService from '../services/subscriptionService';\nimport confirmationModal from './ConfirmationModal.vue';\nimport editPlanModal from './EditPlanModal.vue';\n\nexport default {\n  components: {\n    confirmationModal,\n    editPlanModal\n  },\n  data() {\n    return {\n      plans: [],\n      languages: [],\n      modes: [],\n      selectedPlan: null,\n      showPlanModal: false,\n      showConfirmationModal: false,\n      planToDelete: null\n    };\n  },\n  created() {\n    this.loadPlans();\n    this.loadLanguages();\n    this.loadModes();\n  },\n  methods: {\n    loadPlans() {\n      subscriptionService.getPlans().then(response => {\n        this.plans = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the subscription plans!\", error);\n      });\n    },\n    loadLanguages() {\n      subscriptionService.getLanguages().then(response => {\n        this.languages = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the languages!\", error);\n      });\n    },\n    loadModes() {\n      subscriptionService.getModes().then(response => {\n        this.modes = response.data;\n      }).catch(error => {\n        console.error(\"There was an error retrieving the modes!\", error);\n      });\n    },\n    showAddPlanModal() {\n      this.selectedPlan = null;\n      this.showPlanModal = true;\n    },\n    editPlan(plan) {\n      this.selectedPlan = { ...plan, subscription_language: plan.subscription_language._id, subscription_mode: plan.subscription_mode._id };\n      this.showPlanModal = true;\n    },\n    savePlan(plan) {\n      if (plan._id) {\n        subscriptionService.updatePlan(plan._id, plan).then(() => {\n          this.loadPlans();\n          this.hidePlanModal();\n        }).catch(error => {\n          console.error(\"There was an error updating the subscription plan!\", error);\n        });\n      } else {\n        subscriptionService.createPlan(plan).then(() => {\n          this.loadPlans();\n          this.hidePlanModal();\n        }).catch(error => {\n          console.error(\"There was an error creating the subscription plan!\", error);\n        });\n      }\n    },\n    confirmDeletePlan(planId) {\n      this.planToDelete = planId;\n      this.showConfirmationModal = true;\n    },\n    hideDeleteModal() {\n      this.showConfirmationModal = false;\n    },\n    deletePlan() {\n      if (this.planToDelete) {\n        subscriptionService.deletePlan(this.planToDelete).then(() => {\n          this.loadPlans();\n          this.hideDeleteModal();\n        }).catch(error => {\n          console.error(\"There was an error deleting the subscription plan!\", error);\n        });\n      }\n    },\n    hidePlanModal() {\n      this.showPlanModal = false;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.table {\n  margin-top: 20px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}